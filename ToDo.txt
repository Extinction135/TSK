
CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions



todo:






assets should be a global class as well, so we can get at them from anywhere!
I LOVE GLOBAL CLASSES


if we make assets global, then we can remove passing dungeon screen into actor's constructor
instead it can just access assets.actorSheet directly
I LOVE GLOBAL CLASSES



in collision functions, move the GameObject and Actor instances out of CheckCollisions
we're creating them each collision check, when we can just reuse them
make sure to set them null when the CheckCollisions function runs



in gameObj objGroup, we have consumable and item enums (+reward)
the comments here discuss an objects list, which we aren't using right now
we may not even be using consumable enum rn either





we should be able to pause the update/input loops using a boolean
we should be able to toggle this boolean via the spacebar
this allows us to pause/unpause the game

we should format the output/debug info dump better
not so many vertical lines, use tabs
write to a single string, then write line that string










implement weapon as a projectile, without any speed
	projectile is pulled from projectile pool
	placed at actor location, offset based on facing direction
	weapon plays through it's animation, with collision recs
	if projectile is active, check collisions against objs/actor/projectiles, move/update projectile
	once projectile reaches end of life, return it to the projectile pool, hide it offscreen
	
	each actor should have a weapon enum
	weapons { none, sword, bow, staff, axe, net }
	
	a projectile has: sprite, move, animate, collision components
	a particle has: sprite, move, animate components
	
	this means we'll have a projectile pool, and a particle pool
	
implement dash smoke as a particle (should spawn whenever an actor dashes)
	
we should be counting the currently used actors, gameobjs, projectiles, floors
this is just an int that gets incremented when Get() is called
decremented when Release() is called
reset when Reset() is called
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type
	

	
load in a background sound file (to determine how much space this will take up)
this file should be loaded into the SCREEN's content manager
a screen's content manager should be unloaded when the screen exits
this allows us to load different music for different screens, without touching assets.cs

this sound file should be a set number of bars long, at the standard length
this should be mono, as compressed down as you can
can we use mp3? that would be ideal
does an mp3 get uncompressed when loaded into game? 

re-export sound files aligned to specific bar requirements
this will require some rewriting / restructuring of melodies and chords


sound manager should be handled just like screen manager
part of game, passed as ref to each screen
so a screen can just say "soundManager.whatever()"

