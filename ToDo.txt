
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	98mb on Win10. 98mb on XboxOne.
	
	
	
	
	
todo:






we ready to dev RoomBuildar




Continue development of RoomBuilder tool

moved hero offscreen (-100, -100).
updated RBwidget to have named instances for move, add, minus tool objects.
updated RBwidget to have named instances for save, new, load buttons.
reorganization of RoomBuilderWidget.

created EditorState enum, added EditorState instance to RoomBuilderScreen.
this state initializes to Move state.
updated RBscreen.HandleInput() to set EditorState based on tool obj clicked on.
playtested, working as expected.







draw custom cursor, to represent the tool state - grabbing, adding, deleting
cursor should display specific frame based on editorState

if in move state, then the cursor should become open hand
if not in move state, then cursor should become pointer finger

if in add state, then the selected obj should move with cursor, alinging to 16px grid
if in delete state, then the minus symbol should move with cursor (top right placement)

clicking while in move state sets cursor to fish sprite
clicking while not in move state sets cursor to finger down pointer sprite












get the RB widget actually working
add selected game object to room
delete selected obj from room

move selected obj around room











Version 0.6 Milestones

roombuilder tool allows creation of room xml data
room builder uses shared game classes, but only subset
has many classes that are only part of builder tool

room xml data is loaded into game at boot
this is part of Functions_Backend class

dungeons are built from room xml data
rooms have a size, based on type
dungeons are built using CC algorithms

dungeons & their enemy sets have different spritesheets, so they look different
create enemies that fire projectiles - arrows, fireballs, bombs

there are a total of 5 dungeons, and 4 crystals
for now, make 5 dungeons that all use the 1st dungeons sprites + enemies
each dungeon should award a crystal, check that this works
reduce the number of crystals in crystals widget + saveData

overworld dungeon icon is the boss of that dungeon
so all dungeons should display a blob character instead of a skull























	
Develop RoomBuilder project

this project can use .net XML serialization & win forms & whatever else
because it will never run on an xbox or be player facing


how do we handle roomData? 
roomData is populated by room builder project
the roomData folder is simmply copied into the project's directory
the project copys the roomData folder to it's output
the game then loads all the roomData upon game boot
when a room is needed, the data is copied from the loaded roomData


dump the room data to XML file
this starts with the user pressing the 'save' button from room builder screen
this dumps the current room data to xml file in RoomData folder


to test that this works, we'll need to be able to add objects to the dev room
for now, we will only be saving and testing the dev room type
dont worry about other room types for now


we'll need to be able to set the tool to move, add, and delete
this is based on what the user clicks on in the tool area of room builder widget


we'll need to be able to set the currently selected object
are we doing this already?
then based on the tool state, we can add an object to the room




objects will be able to overlap
the objects we'll be saving will be located on the pool's roomObj list
so we can just dump that list to XML file, ignoring inactive objects


roomData
	type
	list of objData
	
objData
	type
	x pos
	y pos

** we'll need to create objects that serve as actor spawn points
** x & y pos are relative to the top left corner of room (room origin)



standardize all room types + sizes (in constructor)

load room data from XML file

create new room screen
this is window with buttons, no widget
new button should create a new room screen
new room screen stores ref to builder screen
affects the room instance in builder screen - changes room type

save button should create a file dialog
load button should create a file dialog

rooms will no longer have an enemy count
instead, enemies will be placed by hand















builder screen
	no hero input, only builder input (grab, drag, place, erase)
	the screen doesn't animate/update objects & actors
	the floors, room objs, and actors are drawn
	hero is set offscreen, with no player input

builder widget
	7 rows of 5 room objects
	1 row of 5 enemy actors
	move, add, erase tool sprites
	save, new, load buttons
	save / load opens a file dialog
	new opens the new room screen

new room screen
	there is no new room widget, it's just the screen
	three buttons, some text
	arrow button cycles thru standard, row, column, exit, hub, key, boss enum values
	create button creates a basic room of the enum value
	cancel exits the screen
	one of the issues here is that we'll need to make sure the floor pool has enough sprites to create the larger rooms
	this will also increase the drawtime on the xbox one
	


	ROOM EDITOR + ROOM DATA
	build the room editor screen
	standardize all room types + sizes
	create the room data folder, update cs project to copy room data to output folder
	basically the same approach as CC, but we'll be storing the room data in a slightly diff format
	we'll only store room objects + enemy spawn locations - no floors, projectiles, etc..
	and we'll only need to store the object's enum value
	this will be stored in a 2d list of Column{Rows}.
	so row1 = {0,0,0,0,0,10,10,10,0,0,0,0,0} for example, where 10 is an object type and 0 isn't.
	this was we don't have to store position data, we just correlate rows to room width, and columns to room height
	width and height is set based on room type, so we'll need to save room type.
	but thats it. room type + the 2d array of int values.
	pretty compact and efficient.
	
	COMPLETE DUNGEONS
	we'll be using room editor to build up the room data folders.
	then when we build the dungeon, we'll load all the room data into the game at once.
	when we need a specific type of room, we just copy the necessary room data.
	then we place the room where we need it, and build it.
	this is done over and over again, until the complete dungeon is built.
	we'll use the same routines from CC to build the Exit -> Hub -> KeyPath -> BossPath layout.
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
Polish++
less instances on sfx list for text
more instnaces on sfx list for bomb explosions

"press any button to play again" should be "press any button to continue"

dungeon run text should blink, just like summary screen
should this be part of the animatedTitle's functions_class as well?
functions.Blink(Title), where title.blinkSpeed is used?

Bug
when a game is loaded, we need to set the hero's loadout to be default
sword, no item, plain cloth
there is a bug where we can set the hero's loadout on one file,
then load a different file, and the hero's loadout hasn't changed
this lets the hero have a bow and fireball on a game where he doesn't have those items..

Add hearts to vendor items
player should be able to purchase heart pieces from the vendor, for gold
4 heart pieces add up to a complete heart increase
remove heart pieces from chests
chests only contain gold, big key, or map




	
	




MOAR STUFFS TO DOs
	

options widget functionality	
	save game autosaves for now
	quit game exits all screens and loads title screen
	load game creates load screen
	
title widget functionality ++
	new game resets player data, autosaves, and creates overworld screen
	load game - calls the load game screen
	audio/input/video/game ctrls - does nothing for now

audio ctrls screen
	sfx volume
	music volume
input ctrls screen
	button mapping
video ctrls screen
	full screen or windowed?
game ctrls screen
	how camera moves - follow hero or center to current room?
	
	
Handling corrupt game files & first run setup - part 2

if a saved game file has correct XML headers, then game will load it
any fields that match to saveData's fields will then be loaded
theoretically, we could load an XML file that has no correct fields,
and the game would never know.. 
this makes it impossible to check if the loaded data is corrupt or accurate.
only XML with malformed opening header tags will fail to load.

we need a way to check that the loaded xml is actually a game file

create a saveData instance, set all it's fields to null
then load the saveFile into the null saveData
then check each field of the saveData to see if it's not null
if any field is null, then the loaded saveFile was corrupted
however, we can probably extract some data from the corrupt file 
so we could prompt the user with a dialog that asks 'load uncorrupted data?'
'the file i loaded is corrupt. should i try to recover it?'	
	
	

	
Polish

	implement the following items:
	item boomerang - just like LttP boomerang, hits an enemy for 1, can 'collect' pickups
	weapon staff - creates a magic orb projectile, if magic is max, else has an attack of 0, but pushes
	equipment pearl - wtf does this do in game?	
	
	we need an enemy that shoots arrows (new enemy type, not just blob with bow)
	we need an enemy that shoot fireballs (new enemy type, wizard?)	

	minor bug:
	the loadout animates the loadout menuItems
	when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
	this leads to a double scaling down effect, which shouldnt happen
	we shouldn't be able to select loadout menuItems.
	this solves the scaling issue, and it doesn't make sense to be able to select them
	selecting an item should only equip it

	polish hearts and magic world UI
	if the hearts change value, play the heart refill sound
	if the magic changes value, play the magic refill sound
	if hero uses magic, play the magic use sound
	
	Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.
	
	conveyor belts should move other game objects, like consumable items
	or other objects, like bumpers and spike blocks	

	what if we pushed the hero a little bit in the opposite direction of the fireball being cast?
	this would make it seem like the 'weight' of the fireball pushed him back	
	
	instead of an unknown menuItem, we should have a 'purchased' menuItem for items that have been bought	
	
	REPLACE BOSS MUSIC	
	re-mix the boss music, making drums much less prominent in the mix
	also, mix the drums down to mono in session - we're getting phase issues when we convert to mono later

	we should be able to turn the conveyors on and off
	this allows us to build rooms with additional complexity
	perhaps the switch turns the conveyors on/off?
	puzzle: conveyor belt that pushes the hero away from something
	solution: hit the switch, turn the belts off, so hero can move around
	we could even put them on a timer and play a timer tick sound, suspending the music
	
	Stats MenuItems? Or Help Menu?
	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	we could add a spear projectile for blob enemies

	it would also be fairly easy to add the flamethrower obj
	which duplicates the functionality of casting a fireball, just like hero does


	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	we need a fairy projectile
	this projectile randomly moves around, slowly
	if the fairy collides with hero, it restores his health and magic
	later on, if the hero is attacking with a net, and the net hits the fairy
	we'll put the fairy in a bottle, if the fairy bottle is empty

	pickup and throw
	hero should be able to pickup the skull pot objects
	hero should be able to carry the skull pot objects around
	hero should be able to throw the pots in a direction
	pots should travel for a bit, with a shadow, before colliding with ground
	pots should also collide with room objects
	pot should have sound for pickup, throw, explode/death
	pots should randomly spawn loot too, when they are picked up
	
	dragging/pushing/pulling
	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, and check collisions with all objs & actors
	if a draggable object would collide, it doesn't move
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	
	
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, i dunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


	
Taking it Further

	design dungeons as a whole
	dungeons should have a theme
	there should be 'architectural puzzles', where the dungeon changes in some way
	this could be raising/lowering water levels
	moving forward/backwards in time
	destroying parts of the dungeon/rooms
	using switches to alter the paths thru rooms, or alter the nature of rooms
	for example, turning conveyo belts on/off, or spike traps
	
	in addition to these architectural puzzles, dungeons should also have a key item
	this key item must be collected to complete the dungeon
	for example, the hammer knocks down posts
	the hookshot pulls hero across gaps
	
	there are certain zelda puzzle tropes to be followed to:
	block puzzle - move a block or series of blocks into place, to press a switch / chest / etc
	enemy puzzle - kill all enemies / miniboss / boss
	shooting puzzle - shoot an eye or some object with an arrow / boomerang / projectile
	torch puzzle - light 3-4 torches
	
	
	
	
Look at how stardew valley engages players
	theres so much to do and explore
	we need more to do and explore
	should be able to have a pet, like a dog
	should be able to speak with more people/npcs
	should be able to manage traders, adventurers, etc.. like assassins creed blackflag minigame
	should be able to craft advanced items, using special parts + gold
	just a ton of additional stuff layered on top of the dungeon running, that is supporting core gameplay
	
	
	
	
	
	
	
