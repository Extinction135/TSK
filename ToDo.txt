GIF 32 Dithered, Quality: NearestNeighbor @ 50% size

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

goal: 13 commits/day

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()
	
adding soundFX
	added ___Src and ___Ins soundFX to Assets.cs.
	added "_____" sound effect to project.
	updated Assets.Load() to load Sound into ____Src + ____Ins.
	call Assets.____Ins.Play() from somewhere in the codebase

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	76mb on Win10.  82mb on XboxOne.
	
	
	
todo:


5



thoroughly playtested on xbox one, ram down to 82mb. no bugs.







A BUTTON INTERACTIONS

interaction rec thoughts
should be part of interaction functions class
call something like CheckHeroInteractionRec()
which would set the interaction rec via SetHeroInteractionRec()
then check to see if it collides with any room objects
then pass those objects to a Handle() function
the actual interactionRec would exist in the interaction functions class

the boss key should come from a chest gameobject
hero should be able to open the chest by pressing A button on it
this will create the interaction collision rec, place it based on hero's direction
then check collisions with gameobjects
then pass any collisions to the InteractionFunctions class, to a Handle() function

hero should have a reward state, where he holds an item above his head
he should statelock into reward for a moment
the item he picked up should display over his head during that time
then it should be Released() back to the pool








we should include a soundFXinstance on actors that points to one of the soundFX in assets
then we can set this instance in ActorFunctions.SetType()
then later just call it generically, like Actor.AttackSound.Play().
same with hit sound, death sound, use sound.














Version 0.2 Milestones

	when a blob is destroyed, it should drop a heart consumable sometimes
	we'll need a gameobject of type consumable
	and hero will need to check collisions with it
	
	summary screen should play the text counting sound while tallying up the numbers
	once the numbers are tallied, summary screen should play the text complete sound
	get the totalTime value counting up to the dungeonRecord's totalTime value.
	we can get the indivdual hours, minutes, seconds
	so we can create ints that represent those in summary screen
	then count those ints up to the values of hours, minutes, seconds
	and concat them all onto the same summary data string
	
	get the total ram use on xbox one, test.

	
	
	
	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	add wall pillar decorations when room is built
	doors should have decorations around them as well

	make sure that the dungeon complete musical cue is mono and 22k

	hero should spin around prior to dying
	other actors should not do this, they should die immediately
	the dungeon screen should only start it's fadeIn if the hero is in his final sitting death state
	it should remain 'playing' while hero spins around

	for the boss fight, we'll just use a musical cue to tell the player they're about to fight the boss
	we don't need to switch music tracks, tho we would like to
	if we can compress the audio enough, we might have room for this track - it would be nice

	whats the reward formula?
	time bonus + enemies killed - damage taken
	time bonus is based on how many rooms are in the dungeon.
	total dungeon rooms - total minutes = gold multiplier * 100.
	this expects the player to clear a room a minute.

	implement a fireball projectile that moves across frames
	rotate the fireball sprite to face down (all projectiles + weapons should face down by default)
	this is spawned from the Y button press
	visually display fire magic medallion for current item in worldUI
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	create overworld screen, with selectable dungeon / shop locations
	these lead to DungeonScreen or ShopScreen
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Maybes / Ideas	
	
	
instead of the current boss intro, we should have a drum fill that matches the song tempo
a fill that goes high to low
and ideally, we would like to have boss music

blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
or they can use a weapon, like a stick or gooey hand, iunno

debugInfo displays the floor index, instead of the # of floor tiles used currently
which isn't really a problem, cause we're going to optimize how floors are drawn later on

OPTIMIZATION
if we don't draw the floor tiles, the draw loop is much faster
so, we could standardize the room sizes, then create a floor sprite
then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type



OPTIMIZATIONS
	drop the sample rate down to 32k to save even more space on bkg music files
	the soundfx are already at 32k, so we know lower sampled audio builds and loads correctly


