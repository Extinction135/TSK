
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	98mb on Win10. 98mb on XboxOne.
	
	
	
	
	
todo:





Fix naming conventions for projects in Repo

VS solutions should all be named DungeonRun.
each solution should exist in folder named for the projet type (UWP, DirectX).



project name = DungeonRun



we can setup the initial screen in ScreenManager.Initialize().
this further simplifies Game1.cs, which is unique to each project





the editor files should be shared between all projects
no single project owns the editor files
the backend specific functions are implemented via Functions_Backend, like normal

Editor classes should be copied into the shared game classes, then ref'd back into projects
the DirectX project should be renamed DungeonRunDirectX
actually, this should be created from scratch









BUG
if we're using ALOT of entities quickly, then a state happens where 
- a bomb may just dissappear before it can explode
- a fireball may dissappear before it hits anything
we should be able to mark an entity as 'important' so it isn't released until it completes










Move Editor into UWP project, seperate Editor from DirectX port

refactored parts of RoomBuilderScreen.




(reorganize the repo)

we should present the user a dialog when they want to save the room
same with loading a room
this is slightly easier to do in UWP, because file dialogs are baked into .NetCore
(instead of including win forms and dealing with that mess of shit)

create the directX port of the game in it's own project folder.
roll the editor into the UWP project (RBwidget + RBscreen)
generalize the load/save room functions into the Functions_Backend class
- we'll need to load room files anyway when the game boots up -
this removes them from RBscreen

load room should accept a file address
save room should open a file dialog

load room should be wrapped by an editor method that presents a file dialog
the selected file address is then passed to load room

for loading roomData, we collect all the files in roomData folder onto a list
then iterate over the list, passing each address to load room




















Room Playtesting

everytime we add an object to the room, save the room data to autoSave file

add doors to each wall, allowing player to leave the room
this can be done by placing doorPos in the dungeon
then calling Functions_Room.SetDoors(Room)

whatever changes are made during playtesting are not saved
we can easily revert to pretesting state by loading the autosave file







complete gameobjects

we'l need to be able to store the obj's direction
how often do we need to do this? prolly all the time...
well, actually not really - what objs use direction?

these objs 
conveyor belts - NSEW - this means there will be 4 objs saved/placed
spike blocks - EW, NS - this menas there will be 2 objs saved/placed
 
we should have an explosive barrel - of course!
just like bomb, but stationary, waiting for collision

Cracked Floor pit opening
we can also have a cracked open floor obj that sits over animated liquid
this varies the 'pit' style a bit

Spikeblocks++
we should be able to create vertical and horizontal moving spike blocks
include an arrow over the spike block as indicator
write interaction routine for PitAnimated
this should work similar to conveyor belt, except it pulls hero towards it's center
if spikeblocks do not collide with the room rec, reverse their position
this prevents spikeblocks from flying out a door

create ice tile (no working for now) - changes friction

add pot throwable obj, just like skull obj

conveyor belts should move other game objects, like consumable items
or other objects, like bumpers and spike blocks	and explosive barrels

we should be able to turn the conveyors on and off
	this allows us to build rooms with additional complexity
	perhaps the switch turns the conveyors on/off?



EnemySpawns
enemy1spawn, enemy2spawn, etc...
enemies are then created at these object's locations upon load



Room Goals
doors should be set to trap doors
once hero collides with them, they close
this traps hero inside room

once all enemies are defeated or switch has been flipped, trap doors become open doors
this 'completes' the room and allows hero to exit

this means that rooms should have a goal enum
{ None, DeadEnemies, Switch, Torches }




organize the roomData into it's own folder
the cs project should copy this folder to it's output, just like CC
the source roomData folder should exist outside of all project directories
should be in the main repo directory

the roomData folder is simmply copied into the project's directory
the project copys the roomData folder to it's output directory
the game then loads all the roomData upon game boot
when a room is needed, the data is copied from the loaded roomData

standardize all room types + sizes
	
Version 0.6 Milestones

roombuilder tool allows creation of room xml data
room builder uses shared game classes, but only subset
has many classes that are only part of builder tool

room xml data is loaded into game at boot
this is part of Functions_Backend class

dungeons are built from room xml data
rooms have a size, based on type
dungeons are built using CC algorithms

dungeons & their enemy sets have different spritesheets, so they look different
create enemies that fire projectiles - arrows, fireballs, bombs

there are a total of 5 dungeons, and 4 crystals
for now, make 5 dungeons that all use the 1st dungeons sprites + enemies
each dungeon should award a crystal, check that this works
reduce the number of crystals in crystals widget + saveData

overworld dungeon icon is the boss of that dungeon
so all dungeons should display a blob character instead of a skull



standardize all room types + sizes (in constructor)

load room data from XML file

create new room screen
this is window with buttons, no widget
new button should create a new room screen
new room screen stores ref to builder screen
affects the room instance in builder screen - changes room type

save button should create a file dialog
load button should create a file dialog

rooms will no longer have an enemy count
instead, enemies will be placed by hand

new room screen
	there is no new room widget, it's just the screen
	three buttons, some text
	arrow button cycles thru standard, row, column, exit, hub, key, boss enum values
	create button creates a basic room of the enum value
	cancel exits the screen
	one of the issues here is that we'll need to make sure the floor pool has enough sprites to create the larger rooms
	this will also increase the drawtime on the xbox one
	
COMPLETE DUNGEONS
	we'll be using room editor to build up the room data folders.
	then when we build the dungeon, we'll load all the room data into the game at once.
	when we need a specific type of room, we just copy the necessary room data.
	then we place the room where we need it, and build it.
	this is done over and over again, until the complete dungeon is built.
	we'll use the same routines from CC to build the Exit -> Hub -> KeyPath -> BossPath layout.
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
update UWP content with DirectX content directory, we've modified the dungeonSheet	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Polish++


Create CheatsScreen - or this could be part of game ctrls

WorldUI++
we should be displaying the amount of arrows, bombs in the worldUI
this way user can see how many they have left



less instances on sfx list for text
more instnaces on sfx list for bomb explosions

"press any button to play again" should be "press any button to continue"

dungeon run text should blink, just like summary screen
should this be part of the animatedTitle's functions_class as well?
functions.Blink(Title), where title.blinkSpeed is used?

Bug
when a game is loaded, we need to set the hero's loadout to be default
sword, no item, plain cloth
there is a bug where we can set the hero's loadout on one file,
then load a different file, and the hero's loadout hasn't changed
this lets the hero have a bow and fireball on a game where he doesn't have those items..

Add hearts to vendor items
player should be able to purchase heart pieces from the vendor, for gold
4 heart pieces add up to a complete heart increase
remove heart pieces from chests
chests only contain gold, big key, or map



	
	




MOAR STUFFS TO DOs
	

options widget functionality	
	save game autosaves for now
	quit game exits all screens and loads title screen
	load game creates load screen
	
title widget functionality ++
	new game resets player data, autosaves, and creates overworld screen
	load game - calls the load game screen
	audio/input/video/game ctrls - does nothing for now

audio ctrls screen
	sfx volume
	music volume
	
input ctrls screen
	button mapping
	
video ctrls screen
	full screen or windowed?
	
game ctrls screen
	how camera moves - follow hero or center to current room? 
	we only need to flip Flags.CameraTracksHero boolean
	
	
Handling corrupt game files & first run setup - part 2

if a saved game file has correct XML headers, then game will load it
any fields that match to saveData's fields will then be loaded
theoretically, we could load an XML file that has no correct fields,
and the game would never know.. 
this makes it impossible to check if the loaded data is corrupt or accurate.
only XML with malformed opening header tags will fail to load.

we need a way to check that the loaded xml is actually a game file

create a saveData instance, set all it's fields to null
then load the saveFile into the null saveData
then check each field of the saveData to see if it's not null
if any field is null, then the loaded saveFile was corrupted
however, we can probably extract some data from the corrupt file 
so we could prompt the user with a dialog that asks 'load uncorrupted data?'
'the file i loaded is corrupt. should i try to recover it?'	
	
	

	
Polish

	implement the following items:
	item boomerang - just like LttP boomerang, hits an enemy for 1, can 'collect' pickups
	weapon staff - creates a magic orb projectile, if magic is max, else has an attack of 0, but pushes
	equipment pearl - wtf does this do in game?	
	
	we need an enemy that shoots arrows (new enemy type, not just blob with bow)
	we need an enemy that shoot fireballs (new enemy type, wizard?)	

	minor bug:
	the loadout animates the loadout menuItems
	when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
	this leads to a double scaling down effect, which shouldnt happen
	we shouldn't be able to select loadout menuItems.
	this solves the scaling issue, and it doesn't make sense to be able to select them
	selecting an item should only equip it

	polish hearts and magic world UI
	if the hearts change value, play the heart refill sound
	if the magic changes value, play the magic refill sound
	if hero uses magic, play the magic use sound
	
	Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.
	
	

	what if we pushed the hero a little bit in the opposite direction of the fireball being cast?
	this would make it seem like the 'weight' of the fireball pushed him back	
	
	instead of an unknown menuItem, we should have a 'purchased' menuItem for items that have been bought	
	
	REPLACE BOSS MUSIC	
	re-mix the boss music, making drums much less prominent in the mix
	also, mix the drums down to mono in session - we're getting phase issues when we convert to mono later

	
	puzzle: conveyor belt that pushes the hero away from something
	solution: hit the switch, turn the belts off, so hero can move around
	we could even put them on a timer and play a timer tick sound, suspending the music
	
	Stats MenuItems? Or Help Menu?
	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	we could add a spear projectile for blob enemies

	it would also be fairly easy to add the flamethrower obj
	which duplicates the functionality of casting a fireball, just like hero does


	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	we need a fairy projectile
	this projectile randomly moves around, slowly
	if the fairy collides with hero, it restores his health and magic
	later on, if the hero is attacking with a net, and the net hits the fairy
	we'll put the fairy in a bottle, if the fairy bottle is empty

	pickup and throw
	hero should be able to pickup the skull pot objects
	hero should be able to carry the skull pot objects around
	hero should be able to throw the pots in a direction
	pots should travel for a bit, with a shadow, before colliding with ground
	pots should also collide with room objects
	pot should have sound for pickup, throw, explode/death
	pots should randomly spawn loot too, when they are picked up
	
	dragging/pushing/pulling
	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, and check collisions with all objs & actors
	if a draggable object would collide, it doesn't move
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang }
	
	
	
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, i dunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


	
Taking it Further

	design dungeons as a whole
	dungeons should have a theme
	there should be 'architectural puzzles', where the dungeon changes in some way
	this could be raising/lowering water levels
	moving forward/backwards in time
	destroying parts of the dungeon/rooms
	using switches to alter the paths thru rooms, or alter the nature of rooms
	for example, turning conveyo belts on/off, or spike traps
	
	in addition to these architectural puzzles, dungeons should also have a key item
	this key item must be collected to complete the dungeon
	for example, the hammer knocks down posts
	the hookshot pulls hero across gaps
	
	there are certain zelda puzzle tropes to be followed to:
	block puzzle - move a block or series of blocks into place, to press a switch / chest / etc
	enemy puzzle - kill all enemies / miniboss / boss
	shooting puzzle - shoot an eye or some object with an arrow / boomerang / projectile
	torch puzzle - light 3-4 torches
	
	
	
	
Look at how stardew valley engages players
	theres so much to do and explore
	we need more to do and explore
	should be able to have a pet, like a dog
	should be able to speak with more people/npcs
	should be able to manage traders, adventurers, etc.. like assassins creed blackflag minigame
	should be able to craft advanced items, using special parts + gold
	just a ton of additional stuff layered on top of the dungeon running, that is supporting core gameplay
	
	
	
damascus appararel / 5060.bigcartel
- we could turn the style of the game into shirts + apparel too
- but the style would have to be futuristic and awesome	
	
	
	
