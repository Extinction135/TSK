"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps
adding music:
	files are saved as .ogg and added to content pipeline, built on high quality.
	keep these files stereo, but at 22k.
adding sound effects:
	sound effects should be compressed down to 22K sample rate, mono, 16bit
VS shortcuts
	CTRL + M, O = collapse functions/regions	
new gif: 50% nearest neighbor, 32 dithered
adding a cheat:
	add value to MenuItemType enum (cheat starts as a selectable menu item)
	update MenuItem.SetType() to set cheat menuItem descriptions, titles, and initial frame.
	add menuItem to Cheat Screen.
	link neighbors, add effect, add check to SetCheatMenuItems(), playtest.
Adding GameObjs:
	make enum defs, make animFrames,
	set objType paths, add to env obj widget
	playtest in field.	
	
	
Phase 1 - version 0.1 to 0.7 (complete)
zelda with a procedural, randomly generated dungeon, and
better movement / dashing / combat on xbox one + pc.

Phase 2 - version 0.7 to 1.0
+ Miyamoto's original lttp ideas. (complete)
+ all desired functionality from lttp + other zeldas.
+ all desired functionality from other games.
+ mature, dark story + endgame content.	
	

	
	
	
Milestones

colliseum implemented, with sub-games + side-quests.
farming + seeds + crops implemented.
dark world, transitions to and from
mountain levels and dungeons (diff sprite sheet)
tutorial intro
basic narrative structure up to fight with king
king boss
modifiers - like cheats, but enabled by game
(this allows us to do stuff like make sure player
can't die in the tutorial section, or ensure that
player's health never goes above 1 in the trials).










What is the Colliseum?

a room that contains NPCs and objects which 
lead to challenges or sub-games within the main overall 
game. these challenges are separate from the main game 
and do not / cannot affect plotlines in any meaningful 
way. there will also be a dark world colliseum, with 
darker and different challenges. these challenges take
place in the spectator's pit. the colliseum is open to
any warrior brave enough to enter.





v0.74 - The Colliseum & Challenges




The Colliseum - Part 9

created two animated spectator sprites, with
colliseum style seating. 

this is actually only 1 obj def in game.
we randomly choose the spectator animFrame,
then randomly set it's anim timer too, so
we don't get a bunch of twinning across a sea
of spectators on the pit level.

updated colliseum obj widget to move large
gate objects to the bottom of the widget,
essentially placing them beyond the bounds of
the window, but still accessible as normal.
this was done to make some space in the colliseum
obj widget, so we can add spectator obj.
it freed up a TON of space, and put the gate
objs together on one row, so they visually
fit together. walls now fit together visually
on a single row as well.

placed spectators around the pit, filling up the
screen. i was careful to only use enough spectators
to fill the screen based on where the hero can go,
within the pit. this means i didn't place spectators
that could never been seen (waste of roomObjs).

removed interior obj markers.
added grass patches around colliseum.
lots of playtesting, looking good.




The Colliseum - Part 12



*npc tells link challenge will start when you're ready
*text: A) I'm ready.  -there is no B to cancel, lol
*this dialog happens after link has completed purchase.

*then wipe pit of vendors, spawn a bunch of blobs, respawn hero.
*we can make a link of dark blocks at start here too.
*then check to see if all blobs are dead.

this condition should be thought of as a puzzle type:
all enemies must be killed for a challenge to end.
or, hero dies. these are the only two outcomes.

at this point, we need some kind of reward screen (*that actually rewards*)
to pop up and let player know they completed the challenge.
this screen exits, loads the default pit (with vendors).
this screen pops if hero dies too, except it's challenge
failed text. same exit sequence.




how colliseum loading will work:
we only have ONE colliseum xml roomdata def. ONE.
and this is because it's a pain to make sure those walls
stay the same if we have multiple spectator pit 
level representations. so instead, we'll just have ONE.
and this is the version of the pit with the challenge
vendors INSIDE the pit, ready to sell challenges to link.
this is the 'default state' of the pit level: no enemies.
when a challenge is selected, we reload the default pit
level, loop over all roomObjs looking for vendors, remove
them, then add the challenge's enemies at specific
spawn locations (far north of south exit, so link doesn't
take damage upon spawn), then release control of the game
back to level screen & player.

during a challenge, we can create a line of blocks
at the start of the colliseum to lock link in, so
it's fight or die.















colliseum sounds and music
colliseum exterior should be silent, just ambient insects.
inside the colliseum, there should be crowd murmurs, like alot of
people are trying to be quiet in a large space.
during fighting, the crowd should cheer each time an enemy is defeated.
the crowd should boo each time the player takes damage.
the bkg music should be ambient rhythmic drums, in time with link's heartbeat.
completing the challenge should play the reward sfx.
this should feel like a colliseum, without any fighting.




Challenge Polish

the words "KILL" should flash across the screen 
at the start of the colliseum challenge, and flash.








improve boomerang sprites based on layer dev/more stuff in art.master
this adds a diagonal frame, plus marks a boomerangs side for
easier visual rotational tracking.





Reading Signs

we need to be able to read signposts properly
this is based on the current room/level.
only 1 signpost is allowed per room, extending to fields.
so, for overworld levels, there can only be 1 signpost.
and it can only say one thing, because it's based
on the room.id. and this will be contained within
a method called ReadSign(GameObject SignPost).







Mob Challenges NPC

this is a series of room battles with increasing challenging creature mobs,
culminating in a battle with Wovles, the only *actually* useful pet in the game.
this is started by the Mob Challenges NPC.
this takes place in special 'spectator' rooms, where the walls
look different and there are animated spectators beyond them.
anim specs have no collisions/interactions and sort above hero,
so hero walks under spectators to the next room, via a door.

populate this with enemies
we have many sprites in dev for this exact challenge

The Wolves
16x16 wolf actors, with stats similar to link.
aggressive if health is high, defensive if health is low.
regenerates 1 health (up to 3) every 255 frames.




















v0.75 - Farming

cut grass should grow into tall grass if near coastlines,
or filled ditches. implement the idea of seeds, sold by the
farmer - AFTER link fixes his crops (each time).



- LIGHT WORLD & DARK WORLD
- this is different overworld map + different levels + diff sprites
- this is NOT A SEPARATE SYSTEM (needless complexity)















EDITOR +++++++++

Implement Light/Dark Room Data

we can model light/dark with a boolean in the room's data.
remember that overworld levels = big single rooms, plus
we ONLY have roomData (level data doesn't really exist),
so we have to model light/dark in room data.

we also want this addition to layer easily into the existing
roomData, so this boolean value should default to true, (< if missing when roomdata is loaded)
which indicates the room is a light world room, since we
dont have any dark world rooms - yet. update the existing
roomData to include this lightWorld boolean.




editor++
it would be nice to be able to toggle roofs on/off.
and hide their collisionrecs too, so we can't accidentally pick them up.
it would also be nice to "lock" water tiles somehow, so we can't
mess them up. maybe different selection modes: landscape, building.
it would be nice to be able to drag select a rec around a set of objects,
then move them with the arrow keys, in 16 pixel increments. this would allow
us to edit parts of rooms just like we edit pixels in photoshop.



















DungeonMap++
miniboss should drop the dungeon map object.
upon touching this obj, hero should be set into reward
state, with map overhead.




Rat Hole
we should have a 'rat hole' that randomly spawns
rats in front of it. we can add this to a room,
and the room now has constant enemies.



Boss + Mobs++
seekers need to be renamed
seekers should also be ROOM OBJS, not actors.
also, the boss should spawn more seekers sooner, so
the initial boss fight seems more impressive and hard.
it's a little lack-luster right now.
there should be an initial wave of enemies the boss spawns.



Fire++
when fire expands, it should expand further vertically,
because it doesn't always transfer from bush to bush,
because bush hitboxes are small.





Enemy Spawns

standard - usually 3 hit.

easy - 1 hit, usually many or they explode.
- we have seekers, they need to be renamed.
- we also have fun floaty eye that should be mob outside of boss room

*hard - more than 3 hits, less than 10.
-we dont have a hard boss for forest dungeon yet.
-make one

Enemies++

Seeker : seeks towards player, exlodes (done)
Standard : 3 hits, with a melee attack (usually sword).

OneHit : fast moving, low melee, low health.
Distance : projectile attack (unlimited), med move, low health.
Healing : healing magic (set amount), med move, no attack.
Aggro : tank, slow, strong melee attack.
Flanking : rogue, weak, fast, with strong attack.

Miniboss : done
Boss : done

we'll need to change the enemy spawn 2, or miniboss spawn to be
Enemy_Spawn_Weak, Enemy_Spawn_Strong. later on, it's likely this 
will expand to also include Enemy_Spawn_Ranged, Enemy_Spawn_Healer,
etc...






Underground Blob Dungeon:
we have an overworld pit sprite.
hide this randomly under an object that can be destroyed,
like a bush on a level. for now, this object will
create a new type of dungeon, an underground dungeon.
this is just a single critical path from hub room to exit room.
just a hub room, then an exit room south of it.
in the hub room, a miniboss will spawn, with a chest.
the chest will have the dungeon map, in case we decide to expand
this dugneon algorithm to be more than 2 rooms in the future.
but, this reverses the dungeon - leading to the exit.
upon exit, we simply return hero to his last overworld location,
which should be stored in save data.
*these dungeons should be blob enemy only, because this is story*


Blobs need to have more weapons & items to attack and use.
can throw bombs. can attack with swords.



Sneaking

link picks up an obj. holding X while carrying this obj
puts link into the 'sneaking' state, which means link
crouches down and the held obj mostly covers him, except 
for his feet. link moves at a much slower pace, but
enemies cant see him and dont attack him.




Pathing

We need dirt paths, without using alot of sprite space up.
we could do vert transition to dirt + hori trans to dirt,
but never actually have a dirt tile. putting two of these
together could build a path, and then we just need corners.
so, minimum of 4 - likely 6.




HitBoxes++
we're always expanding and contracting the hitBox.
we need dedicated methods for doing this.
we need to override/replace/rewrite xna's rectangle class.
but we need to keep the intersects() and contains() methods,
as they are, as fast as they are.



Sorting++
when hero pushes a shelf against a back wall,
the backwall sorts over the shelf. 
and all other sinks, stoves, etc..
so fix this.



Exploit : Trap Door Pit Teleport

the majority of what i do as a game developer is deal
with cause and effect, how systems interact, and designing
systems that do their job BUT ALSO get along with the
other systems that exist in the global namespace (ecosphere).

currently the system designed to track what door link
went thru last is causing a problem with the system that
represents the pit's functionality. this occurs in this
particular state, and likely in others:

hero enters a puzzle room where the doors become trap
doors (this is only way to get trap doors). hero moves
to a different trap door, touching it, activating it
as the last door 'entered'. hero is then pushed, or
falls into a pit (maybe with a certain direction).
this causes the pit to pull hero in, then call 
RespawnInCurrentRoom() on the hero, teleporting him
to the last touched door, the 2nd trap door. with
enough inertia, the hero can overcome the trap door's
initial frame of pushing, and link can pop out into
the room on the other side of the 2nd trap door.
i experienced this exploit personally. not sure if
it would work on vertical North/South doors, as
it only happened to me for East/West doors.
this is *likely* what's happening, tho I'm not
exactly sure - but I do know how to fix it.

the fix is simply to remove trap doors from the
routine that sets the last 'touched' door / active door.
in fact, only open doors or bombed doors should be
set as the last / active door.




Boomerang Bug?
ran into lost boomerang bug again.
simply left a room with it bouncing around.



when water spreads to other tiles, it shouldn't play
the water splash soundfx, this takes waaay too long.
it should play the water walk sfx, or we should shorten
the water splash sound fx dramatically. either or.
or we should create a water spreading soundfx,
then use the splash fx shortened. i dunno.

 
 

 
 

Improve Projectile.Spawn()

*miniboss cant shoot fireballs south - why?
?= pro.spawn() assumes that the actor's collRec is 16x16 - it shouldn't.
this means only 16x16 actors can safely shoot fireballs without damaging
themselves, which is some valve level stupid. this method should take
the actor as a parameter, and then we should base the offsets FOR ALL
PROJECTILES off of the actor's collision rec width and height. this
would allow larger actors, like bosses, to SHOOT FIREBALLS. geez.

Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye: spawns A TON of exploding seekers while in his special.











we can handle plot/level changes like this:
we have a boolean that represents this levels state.
false loads xml data A. true loads xml data B.
the differece between A and B represents something
that happened in the story, or something the player did.
-perhaps the player killed an NPC.
-perhaps the player irrigated a farmers crops (B would have filled ditches, A wouldn't).
-theres alot we can do here.






Boomerang++
*boomerang should only create attention particles upon hit if
it's traveling away from hero. if it's returning to hero (it's lifecounter)
then it shouldn't create ANY attention particles. this fixes
the visual bug where it can create a ton of pops when hitting
objs from certain angles / directions.




Metal Gear ++
if you're carrying an obj and press B while not moving, link
should squat down and the heldObj should sort mostly over his head,
and he should flip the actor.hidden boolean. then update functions_AI
to check the actor.hidden boolean instead of the actor.underwater
boolean. then update the underwater rountines to set the actor.hidden
boolean to true when actor dives underwater. the net effect of these
changes is that the hero will be able to hide underwater, underwater
while carrying an obj, or on land while carrying an obj. 
being able to hide on land while carrying an obj is more metal gear
than being able to dive while holding an obj. lol.



in hard mode, pits should deal 1 damage.
in normal mode, pits deal no damage.







*consider that actors may need interaction points*
*needed if actors want to pickup or dig, and it would be nice to see that
with more advanced enemies later on*
migrate hero's interaction rec and interaction rec functions into actor class.



