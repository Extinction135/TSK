
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


VisualStudio Shortcuts
F12 + selected word = goto definition
CTRL + M, +O = opens, closes regions


The Big 4:
"Give the player meaningful choices to make."
"Remind the player of their choices."
"Recognize and respond to what the player does."
"The Gameworld is a character that reacts to the player."


- Milestones -

Forest Islands complete
Death Mtn Islands complete
Lava Islands complete

Cloud Islands complete
Swamp Islands complete
Thieves Hideout complete

Shadow Dungeon, TSK Fight complete




0.77 playthru: https://youtu.be/_b7qclGTffE
0.78 goals:
	more items (axe, hookshot, hammer, magic mirror)
	more interaction (throwing objs, actors/objs in water, decorations)
	better dungeon traversal (X solved puzzles, marked map)
	better coliseum - uniq objs + enemies
	better overworld - more skulls, waves, cluds, vfx @skullIsland
	smaller ram - X dungeon sheets get smaller
	fix projectile spawn system + enlarge boss hitboxes
	implement bed + dream sequences - special leveldata + set hero's type + dialog prompt
	(exiting dream field ends the dream)
	(we may split bed into two objects again, to make this interaction more expected)







Today:











Miniboss OctoMouth

miniboss watery mouth can't throw fireballs. no item equipped.
fixed, magic fireball equipped, ai rewritten to call useItem.

but the hero can't use magic in the water - unless he is of
a specific enemy type - octomouth and kraken and tentacle.

non-hero actors can now use items in the water (while swimming).
this allows enemies in the water to use items, if they want to.

if the player is an actor type other than blob and link,
then they attack with their weapon instead of diving underwater.
a consequence, is that spiders now walk on water, and can
attack on water, so they are insanely scary. and an unarmored
spider moves very fast, and link would have no defense against
this enemy in the water, so this matchup is very overpowered.

modified octomouth's ai to dash when a direction is input,
so this should make him more active when he's underwater.

item use in water was modified to be based on the hero's
compMove.grounded boolean, which models if an actor is flying
or not. if the hero is a flying actor, then allow item use
while swimming, because they're actually hovering above the water.

playtested all enemies on land and on water. fun.
the unarmored spider is not as fast as i thought, because
we set the hero's friction to very slow when he goes
into a swim state. the spider is in a swim state, but the
swim anim frames redirect back to normal idle/walking frames.
so the spider appears to walk on water, but is slow. i like it.

update: link and the blob are only actors that cannot use items
in water now. hero, as any other actor type, can use items in water.

tested, most actors working as expected now.








we want to preserve diving for specific actor types.
this is ocotmouth, kraken, tentacle.



tentacle should have fang as item, should use item.
tentacle's swim dash needs ypos +16 offset.



bushes should not regrow if any actor is touching them,
otherwise actors get stuck in the bush and cannot move.




projectiles should spawn based on caster's hitbox center,
then add half width or height, plus a pixel bumper, based on
the projectile's direction. each frame, the projectile
either tracks it's caster's hitbox, or performs a unique
behavior.



hero should not be able to climb walls unless he is blob
or link.










big eye boss can spawn fangs, but they hit him from certain
directions. also, he cannot spawn seekers via item use, which
he should be able to. there should be magic for this, and the
seeker should seek out the first actor that isn't it's caster.
this maintains it's behavior, while making it useful to the player
as well. this is enemy magic/items, so we can add it to the
enemy vendor as well.

boss kraken's swim waves are incorrect for swimming left/right,
the swim waves need to be pushed south 16 pixels. for swimming
north, they need to be pushed +16 pixel as well, maybe +32.
also, the boss kraken should have a magic item that spawns a
tentacle. this tentacle just makes a standard tentacle, which
will attack link and can be spawned on land. we should update
tentacles spawned in this manner to have no speed, so they spawn
unable to move. they should randomly attack in every direction too,
so link can create walls of angry tentacles, using this enemy magic.
this should probably be two types of objects honestly: tentacles
spawned by the boss (in water), and tentacles spawned by the hero
(in water or on land) which are just stationary. this preserves the
boss' implementation (using a magic item) and also gives the player 
something intresting to use (using a magic item). *actually, the 
kraken creates tentacle ACTORS, which seek hero. hero could create
tentacle OBJS, using same sprites, that could attack random directions
and form useful walls. this would also be the first instance of
creating roomObjs by the hero/player.

tentacle special actor should have the fang equipped for his
ITEM, because he is in the water, and X causes him to dive. we have
to preserve this state in order for hero to fully function, so
enemies in the water can only use items, never weapons, limiting them
to one type of attack. right now, tentacle actors










-PLS DO THIS NOW, IT'S HOLDING THE PROJECTILE SPAWN SYSTEM HOSTAGE-
Actor Refs

a projectile's caster should be an actor reference.
if a projectile's caster is null, then it should have no behavior.
this is because some gameobjects cast projectiles,
but in that case the projectile wouldn't have any behavior
related to the caster.

this simplifies the current system for handling projectiles,
which uses the moveComponent. using this moveComp, projectile.update
attempts to prevent projectiles from ovrelapping with their casters,
but this is based on the compMove and not the hitBox, which is
actually the target of importance. we need to have access to
the entire actor object, not just it's compMove! we need to
touch the actor's hitBox from projectile.update, and we can't currently.
once we do this, we can check and align projectiles to the actor's
hitBox, and then larger enemies can have larger hitboxes while also
being able to cast projectiles...
plus, projectiles could properly implement their behaviors - by
tracking the actor's hitbox instead of their newPosition..

Improve Projectile.Spawn()

*miniboss cant shoot fireballs south - why?
?= pro.spawn() assumes that the actor's collRec is 16x16 - it shouldn't.
this means only 16x16 actors can safely shoot fireballs without damaging
themselves, which is some valve level stupid. this method should take
the actor as a parameter, and then we should base the offsets FOR ALL
PROJECTILES off of the actor's collision rec width and height. this
would allow larger actors, like bosses, to SHOOT FIREBALLS. geez.

Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye: spawns A TON of exploding seekers while in his special.






























Default Dungeon
the default dungeon sheet is the one we use for all
overworld / field level dungeon objects. this means
this 'dungeon' has a green grassy floor.

visual bugs: 
bottom spike lip of pit competes with middle pit black obj.
also, the pit teeth default to brown, which is part of the default
sheet. this default sheet should be thought of as the 'world' 
dungeon sheet - these pits will appear on the overworld against the
expected green bkg color. so the default pit teeth need to be green,
leading into brown as they go down into the ground. 


Coliseum++
we need 'windows' that look into the coliseum,
like the overworld sprite depicts. plus, I don't like
how the coliseum level is unbalanced and to the right.
instead, the coliseum - and all subsequent coliseums -
will be entrance centered to level, north of spawn.
this 'presents' the level much better, because coliseums
have no required puzzle for entry.

a window is a 3x4 obj, with baked in bkg.
so this saves us a lot of roomObjs.


Coliseum++++
we also need to have the large skulls be a 2nd object
that can sit on the ground, indestructible. this way
we can decorate the shadow coliseum appropriately.
we should add this skull detail to the overworld map as
well.





Roofs++
remove rear roofs from the overlap check - now hero
can't peek into houses by walking behind them - he has
to be underneath the main part or the chimney.





Grass++

cut grass should grow into tall grass if near coastlines,
or filled ditches. 





Water++

*we could have animated floating lily pads, much like the animated
flowers that sit over the grass levels. this would add some decoration
to the otherwise bland sea water.

*need to make boat anchor object - this is already in common objs,
and can be used to further decorate piers.





Magic Mirror
use it in a dungeon to return to the exit (starting room). 
exiting dungeon takes us to field.
it can only be used in dungeons, and it's partially broken.
it's use in the shadow dungeon is different, as it transfers
link from the darkworld to the lightworld version, and does
not take link back to the starting (exit) room.

the history of why the magic mirror is broken can be explained.

- plays warp sound fx
should call Level.BuildLevel(Level.ID),
which will cause the level to fade in from black,
and place hero at the entrance the dungeon again.
*this should only work in a dungeon. 






Overworld++
we need more skulls around the shadowking's island and sea. keep
the shadow skull area sparse, cause it's going to be animated,
and it will never 'collapse'




Exploit : Trap Door Pit Teleport

the fix is simply to remove trap doors from the
routine that sets the last 'touched' door / active door.
in fact, only open doors should be set as the last / active door.
the other exploit is to touch a trap door or closed door to
set your respawn point, which is not what i want.


Implement Cane of Somara (or whatever)
this is the cane that creates blocks that are pushable.
this makes it MUCH easier to get thru dungeons, as many
rooms rely on floor switches, which link can simply
create a block over. if a block is created ontop of
a blocking roomObject, the block ...





Room keys - these only work for the room and only unlock 1 door, and
these rooms turn all their doors into locked doors upon close, similar to puzzled rooms
link doesn't put them into inventory - he literally picks them up and walks over
to a locked door and collides with it. link should also be able to throw keys into
locked doors, which means we need to throw objects directly in line from link,
which simplifies how objs are thrown ALOT, and makes their throws more predictable.

this is kinda like super mario world style key gameplay.
if obj.type == key & obj.hitBox.intersects lockedDoor.hitBox,
convert lockedDoor to openDoor, release() key.
- or - we put the key as a menuItem in inventory,
and clear that inventory item when link enters a new room (pre-build).

Keys!!!
**we could have 'keys' in the game, which would be temporary for the room only
the doors would shut and convert to locked versions, or only some of them would.
inside the room is a chest that contains a key. hero picks up the key, unlocks 
a door, key is used, continues on. the room resets, works the same later on.
the key would be displayed in the inventory screen as a brittle rusty key.
and when it's used, the key breaks. the flavor text says that the key will
likely break after one use.

we could lock one door randomly, or we could lock ALL THE DOORS, and then 
force the player to choose which door they want to unlock.




Explosion Surfing (Bomb Jumping)

if an actor is hit, simply put them into a flying state.
this will cause the actor to be able to fly across pits for a moment,
but when the hit state ends, if they overlap the pit, they
will be pulled in. but, this does allow a type of bomb jumping,
or rather "explosion surfing". which sounds so much better.

we could even put the actor into a 2nd type of hit state,
a staggered state, which would hold the actor in the hit state for
longer, allowing them to fly for longer, allowing them to cross
single tile pits safely - and only an explosion would be able
to set an actor into this 2nd staggered hit state.

which, staggered seems like a poor name for this state.
likely should be something like ExplosiveThrow, 
so we know the actor is being thrown by an explosion.

we can implement this now and ensure that bomb jumping is not
only preserved, but supported officially in this game, and is
known as explosion surfing, because you can also use fireballs
to do these type of explosive throwing tricks.




Speed++
slow finish / build becuase we call cleanRoom() twice, which is dumb af
in dungeon / room routines.

