
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
	
	
Roadmap

0.76 - swamp levels + dungeon + enemies
0.77 - castle, city, royal vendors
0.78 - king, fight with king, lightworld storyline
0.79 - BOAT level, intro, farming + seeds + crops

0.80 - dark world map + 1st level + transition to/from
0.81 - volcano levels + dungeon + enemies
0.82 - ice levels + dungeon + enemies
0.83 - graveyard levels + dungeon + enemies

0.84 - darkworld castle level/dungeon + enemies
0.85 - darkworld queen battle
0.86 - darkworld storyline
0.87 - ganon battle + storyline

0.88 - secrets
0.89 - sidequests, extra
0.90 - COLOR!!! (keep grayscale as texture option)

0.91 - playthrough videos
0.92 - development videos
0.93 - intro to codebase / systems design
0.94 - overall design & direction of TSK
0.95 - thoughts on zelda franchise

???

1.0 - official release



















Today:



Swamp Miniboss - OctoMouth

this is lttp's darkworld walking mouth migrated to the
water, representing an underwater creature with giant 
teeth that shoots fireballs and can swim, dive.

underwater, octomouth randomly moves in a direction or
chases hero if he's low on health. often, octomouth will
rise up out of the water and stop all his movement.
then he will face towards the hero and wait to be attacked.
sometimes he will shoot a fireball at hero, and sometimes
he will dive back underwater. if his health gets below
half, he moves alot faster. that's it.

Improvements

+ if any actor is underwater, they cannot take any damage
from anything and are essentially invincible. the hero can 
go underwater, but it only lasts for 4 seconds, and while
underwater the hero can't attack or use items. it's defense.

+ this allows various water-based enemies to retreat into the
water as part of their ai strategy. these enemies then move to
a different location to attack from a distance or harass upclose.

+ dashing while underwater is now allowed. hero can dash, along
with enemies. this allows underwater swamp enemies more freedom
to move about their surroundings.

+ underwater enemies that are hit immediately go into their
underwater state - so hero only gets one hit at a time. else,
it's very easy to spam attack and that feels cheap - esp for
these underwater enemies which could easily dive afterwards.

+ modified octomouth mouth to more often surface above water,
and reduced his affinity to dive to be more rare. this allows
the player more time to attack him when he's above water, and
decreases the overall time he's underwater so hero gets more
chances to attack him. this is to balance the effect of hitting
underwater enemies, which is that they go underwater immediately.
so the attack window is open more often, but it shuts as soon
as an attack lands and the player has to wait for a moment for
the next window. this is noted with auditory soundfx (each event),
so the attack window and subsequent failure/success feels good.

+ reduced the health of octomouth from 15 to 10, since it takes
more time and patience to kill this particular miniboss and i 
don't want the pacing of battle to slow down too much for this
1v1. 

+ updated actor animation routines to allow swimming underwater
enemies to have an attack animation, since octomouth is always
swimming and MUST display some visual change when he attacks.

+ updated dungeon routines to spawn octomouth in swamp dungeon.
while there isn't water in the hub room, octomouth is setup to
function as if there were, and 'dives underwater' into the ground.
which works system-wise (he'll pop back up 'above water'), but
doesn't make much sense visually..














Swamp Boss 

Octohead + Tentacles

tentacles are unkillable actors. they take no damage
but still get hit and have sfx. they randomly move towards
or away from hero, and if they get close enough they
swing wildly using bite attacks on left/right.
if hero hits them, they go into a stunned state
for 4 seconds (their breath counter). then they
return to harassing the hero.

octohead simply ducks in and out of water and
randomly moves around. he has alot of health, and
spawns 4 tentacles if there aren't 4 tentacles around.
if his health gets below 10, then he spawns 4 more
tentacles, bringing the total to 8 tentacles harassing
the hero while the head randomly moves around.
upon defeat of the head, all tentacles explode and die.

















Boss And Hub Room Upgrade

*we need a watery hub room for swamp mini
*we need a watery boss room for swamp boss
*we need small tiles that the hero can stand on, above water (water lillies!)

*we need swamp dungeon to specifically load these mini & boss rooms.
**in fact, it would be good to have dungeons specifically load the hub
and boss rooms, so we dont have insane boss battles on ice.

we need to 'texture id' each room to a dungeon type using an enum, in xml data.
then loop over the hub rooms, looking for forest id enum, then build it.
we could even collect a list of hub rooms with forest id enum,
and randomly choose one, allowing for variation. we could even
place forest specific objects in these rooms, because we know they
will always be built in the forest sheet (so we dont have two level
sheets on screen at once).

this could be the way to set the level's texture as well.
if the room has a dungeon type enum, then we know what texture that
room requires to be displayed correctly. when we load the room,
we could simply set the texture based on the room's texture enum.

*this removes the need for SetTexture() to exist, as we load/set
the texture based on the texture enum found in xml data, instead.

some rooms would have the texture enum id of any, corresponding to
any of the texture sheets. in this case, we would base the texture
off of the level id.









*this also sets up the possibility of water colliseum battles.
*judge should be sitting on a lilly pad.
*we'd just need to flood the colliseum with water tiles, then
place lilly pads / rafts / bridges / etc in specific areas.











swamp entrance level design
-must swim UNDERWATER under objects to gain access to dungeon entrance.
-need these water objects to swim under too
-need to update underwater swimming to allow for passing through
certain objects (those created above)...


spikeblocks? swim under. indestructible. immobile.
lily pads? stand on top of, with watery feet.
marsh grass = impassable, but burnable.





forest level redesign -
a horizontal set of trees block the dungeon entrance.
the entrance is surrounded by indestructible objs.
player HAS TO BURN down the trees to get access to dungeon.
this teaches player objs can be destroyed.
bonus: grass under the trees should act as a fuse for a
massive forest fire across the whole level. kinda like it
does now, but better.

darkworld dungeon entrance level design idea:
must grow foilage to enter dungeon, which
also grows monsters and stuff..









Mountain Sprites
add black pixels to the corners of the mountain wall sprites.
this will make the rooms appear rounded, which further visually
separates them. 




Colliseum Entrance Obj++
the colliseum entrance obj should just be a wide black entrance,
like the center sprite. we dupe that for a total of 3, so we have
a massive entrance. then put those skull pillars on the side. why?
to match the entrance/exit sizes between the colliseum levels.
the exit from the interior is pretty wide, so the entrance
should be wide as well.















My Chickens!
now that we have posts, we can make this sidequest.
this is an NPC with an expanding hitBox check for 4 chickens
nearby. surrounding the NPC is the posts, which form a chicken
pen. link has to pickup and deliver the 4 chickens to the pen,
then he gets the reward.























Polish + Fixes

explosions should push roomObjects that they touch.
that are moveable. that dont get destroyed?
are explosions pushing objects?

add a 'clean room' button - removes all roomObjs
not of group wall or door. thats it.
leaves us with a blank room with walls, doors,
statues, and floors.
add this button to a new widget.. somewhere..


rats and crabs should "bite", but turtles dont.
all types can be picked up and carried, but rats
and crabs will eventually bite link, causing link
to throw the creature and take 1 damage.


it would be nice to show the currently selected objects
important parameters, like moveable, grounded, etc..
we could put this info next to the object in the objTools
widget, if we extende the widget.


footholds were pushed off the mountain wall.
i assume a frame of interaction happened prior to
the roomObj types being updated. 
*when we reset the pool, stopMovement() on all objs too.








TITLE SCREEN + TEST AI

title screen is the menu with input over a level screen
played by an AI. this AI doesn't have to be good. it just
has to move around and attack and explore stuff - and it can't
die. after a period of time, randomly load a different level
or dungeon. should start inside a dungeon.




add to forest dungeon:
eye statue - doesn't attack, can be picked up like turtle. 
doesnt move. hand placed.

floating sm eye - randomly floats around, explodes if near hero,
hand placed.



FIX PROJECTILE SPAWN SYSTEM PLS K THX BAI

for now, all actors are using the same hitbox.
the hero's hitbox. so some enemies are really hard to
hit, because visually it looks like they are bigger
than their hitbox says they are in-game. this has been
fine so far, but we want MORE CONTROL over hitboxes...
-related to-
projectiles++
projectiles should be cast based on the caster's collision rec.
spawn() should account for collision rec and always spawn projectile
in a position that isn't overlapping caster's hitBox. this allows bosses
to spawn projectiles, since their collision rec isn't the same size
as heros, and we're basing all our projectile spawns off hero's hitbox.
this is a pretty important change.
