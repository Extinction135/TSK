"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps
adding music:
	files are saved as .ogg and added to content pipeline, built on high quality.
adding sound effects:
	sound effects should be compressed down to 22K sample rate, mono, 16bit
VS shortcuts
	CTRL + M, O = collapse functions/regions	
new gif: 50% nearest neighbor, 32 dithered
adding a cheat:
	add value to MenuItemType enum (cheat starts as a selectable menu item)
	update MenuItem.SetType() to set cheat menuItem descriptions, titles, and initial frame.
	add menuItem to Cheat Screen.
	link neighbors, add effect, add check to SetCheatMenuItems(), playtest.
Adding GameObjs:
	make enum defs, make animFrames,
	set objType paths, add to env obj widget
	playtest in field.	
	
	
	
	
	
	
	
	
	
	
	
	
	
v0.7 goals
x - divide spritesheets up so they can be expanded / modified easily
x - get all objects integrated into the new system / layout
X - expand RoomBuilder to include the creation, placement, loading and saving of world levels.
X - Outside Town Level, vendors

- Dungeon Entrance Level, dungeon entrance object
- obj linked to dungeon generation + extensive testing

- healers house, full death/respawn loop in game
- this includes buildings, beds, interior objs

- Non-room repeating Dungeon, additional rooms
- Flying Dungeon Enemy, Minor Overworld Enemies
- Blob AI improvements - sword, arrow, bomb based on weapon / item loadout 
- blob loadouts could be randomized when room is built()

- EndlessForest Demo (shows off gameplay, complete on it's own, camera tracks to hero).
- this is randomly placed bushes / trees / grass + ANY enemy type
- room rec tracks to hero, expanded room rec cleans up anything that doesn't touch it
- as room moves, *generate random stuff just OUTSIDE of room rec*
- this means, as hero moves he is always 'finding' new stuff, even if he doubles back
- npc outside endless forest dialog = "once you go in, there's no way out..."
- later on implement magic mirror, which returns hero to overworld screen

(2 'dungeons', 2 'locations' - colliseum + healers house)






TODAY:







Trees++

fixed a bug where widgets couldn't be unhid in editor.
added objects to colliseum and forest entrance levels.

added tree interactions with explosions, 
becomes tree stump + attention particle + ground fire.

overworld levels look much better now.


















Polish++

add debris objs to env objs widget, scatter around dungeon entrance

bush debris - hitting a bush should create leaves that travel in the direction of the hit
leaves only last for a moment, then die

blowing up a tree should create lots of leaves in random directions

link walking on tall grass should create small grass at link's feet, partially hiding them.
any grounded actor walking in tall grass should get "grassy feet".
so this is a sprite that lives in the actor class, tracks to the actor's feet,
and is only visible when actor is passively interacting with tall grass objs.

when player presses A on dialog screen entering dungeon, play door opening sound.
this sound should not play when the hero spawns in the dungeon, where i think it does
it plays after the dungeon is built?

fairies are spawning waaaay too much.













input polish
when moving the joystick diagonally, the input *should* split evenly between up and say right.
if i'm 60% up and 40% right, it should be up. right now, that diagonal just sets to right.
even if it's 90% up and 10% right, it's set to right. it should be a 50/50 split.
that will increase the precision of sloppy diagonal weapon attacks, aiming their intended direction.




hero should spawn facing up in dungeon.
hero should spawn facing down after exiting dungeon.



opening / closing of level screen
this shouldn't be a fade in/out - thats easy and cheap.
instead, we're going to ape LttP's circular black transition.
but instead of a circle, we're going to use a square/rectangle.
this will require 4 rectangles, each the size of the screen.
these are left & right, which close or open horizontally based on the hero's X position.
the same is done for the top and bottom, vertically, based on hero's Y pos.
these can be programmed independently too, and should ease in.
what we should see: the edges of the screen turn black and grows towards link eventually covering him up.
then we can transition into a dungeon, to overworld map, etc...




































*** we could have a massive tree trunk without a top for the entrance ***
the trunk would just keep going all the way up to the top of the sprite sheet,
and we'd place the dungeon entrance near the top of the level, always.
this way, it appears like it's much bigger in game, and we can surround it
with various smaller trees to increase it's relative size.
plus, this tree looks like it belongs in the dark world. rt.



*** we could track the hero within a smaller area of the room's rec
this would allow us to build larger outdoor levels, since we aren't using
alot of objects on these levels. plus, it would make the camera & game feels more
dynamic, with more things moving around. by limiting the camera's area,
we can still have levels that are filled to the edge of the screen with objs.
it's the best of both worlds, we just have to ensure a 'camera border' is maintained
with field rooms, so the camera doesn't keep tracking hero while hero exits level..





i want to put portals / entrances in their own widget, because they have
various sizes, and we only need to display them occasionally, unlike shared objs
which we display more often, plus we're just wasting widget objs by covering
them up with the dungeon entrance obj...




in editor, when we select an object, we are assuming that obj is 16x16
instead we should be centering the obj to the cursor based on the sprites framesize




add signpost obj that hero can read to dungeon entrance level discussing dungeon.
























Then we need to create the healers house, with the spawn point being the bed.
we need a bed obj too!

then the proper death loop needs to be implmented in-game...

death loop:
if the hero is in game, then hero respawns at healers house.
if the hero dies while the game is in editor mode, then the hero comes back to life.
healer tells link that 'a mysterious stranger brought you here'.
the idea being that queen zelda can sense his suffering and disguises herself in
order to silently save him, to keep him on his path to her, as her plans intend, 
so she remains in control of everything. this should be revealed at the end of the
game, in the final dialogs.





















Create NEW WORLD GameObjects

use the new 'wor_' naming convention prefix.

make a BIG tree, 2 tiles tall.
should be able to cut it down with several chops from the sword.
the first chop should drop leaves randomly.
the second chop should drop more leaves.
the third chop should destroy the tree, revealing the stump
drop a ton of leaves every where, and drop loot 50% of the time.
explosions bring the tree down immediately.
fireballs create ground fire on the tree stump.























Non-Repeating Rooms in Dungeon

we need to make rooms non-repeating in the dungeon.
it's cheap to come across the same room over and over again.

so when the dungeon is being built, we need a list of rooms (based on loaded room data)
then when we place a square room, we ID it, and strip that room off the roomsList
and if we run out of square rooms, then we just try columns, or rows.
this way the dungeon algorithm can never reach a point where there are no more rooms to use
which would be game breaking. also, we need ALOT of rooms to build from.


row rooms need to be redesigned to be MUCH better
we need more rows and column rooms, and their quality needs to be improved.





we need a flying enemy - like a BAT






Implement Light World and Dark World RIGHT NOW
because we need to understand the architecture this is going to need,
before we start tacking a bunch of levels onto the system.
plus, we need to polish the transition between the dark world
and the light world..
















in save data, we should have the fields named:
heartsMax, magicMax, bombsMax, arrowsMax.
we don't need magicTotal anymore.

do we actually use actor.compInt (this is the interaction component) ??? wtf

fix how kick sountrack volume is handled
the hero's health sets the volume of the kick soundtrack
this check should be happening in the level class, not anywhere
in the assets or music classes, because the kick volume is only
changed during the level screen's life. when the screen closes,
it should ensure the kick volume is 0. this prevents issues we've
had before where the kick volume was above 0 while player was on
different screen.

we should include a soundFXinstance on actors that points to one of the soundFX in assets
then we can set this instance in ActorFunctions.SetType()
then later just call it generically, like Actor.AttackSound.Play().
same with hit sound, death sound, use sound.






























v0.8 goals

- implement enumFields for building rooms (big optimization)

- fix picking up, carrying, throwing, dropping, dragging, pushing objects
- can drag: light blocks, dungeon statues, barrels, torches on/off, chests
- can pickup, carry, throw: pots
- remove dropping pots from game, hero can only throw them

- create 'boat' level, with boat captain, who has dialog with link
- offers to take link to a variety of locations, using vendor screen
- only available location is water temple, for low gold price (since link 'hires' crew)
- this level is the boat obj + a dungeon entrance obj + a bunch of water tiles (maybe a small island)
- links path is to/from the boat to the dungeon entrance

- water temple / swamp dungeon: 
	build crit path to hub, crit path to key, crit path to boss, 
	*crit path to water switch (pullable lever)
	*place water switch randomly in room/hub room
	water pullable lever flips high/low water level boolean
	when rooms are built they build high or low water levels, 
	low water levels prevent hero from passing thru rooms 
	there are low water levels in rooms along the key or boss crit path.
	hero must flip switch to access key or boss rooms, or not.
	boss is tentacles squid
	
- can swim, 'dive', dash, and reward / pickup stuff in water
- dive: 
	in shallow water, this picks up whatever is hidden using reward state.
	in deep water, this allows hero to move 'under' some blocking objects
	diving is timed / capped at 255 frames, after that link pops his head back up
- dash:
	works the same in shallow and deep water, but can't be done while diving
	
- mountain dungeon (diff enemies, boss, dungeon sprites - but same rooms)

- room keys - these only work for the room and only unlock 1 door, and
these rooms turn all their doors into locked doors upon close, similar to puzzled rooms








v0.9 goals
??? story, secrets



v1.0 goals
??? support, testing, videos, documentation, alt marketing














