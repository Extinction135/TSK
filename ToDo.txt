GIF 32 Dithered, Quality: NearestNeighbor @ 50% size

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

goal: 13 commits/day

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()
	
adding soundFX
	added ___Src and ___Ins soundFX to Assets.cs.
	added "_____" sound effect to project.
	updated Assets.Load() to load Sound into ____Src + ____Ins.
	call Assets.____Ins.Play() from somewhere in the codebase

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	76mb on Win10.  82mb on XboxOne.
	
	
	
todo:


1


worldUI now scales up the hero's remaining hearts upon any change, positive or negative.
playtested, working.



world UI should scale up all the hearts when hero picks up a heart/increments health
this is just like when hero loses a heart, but the opposite



boss should collide with hero - right now he doesn't
this means the boss 'locks' the hero when he collides with him - the hero can't move
this also leads to a state where the boss can spawn a blob ON TOP of hero, locking them both

simply check collisions with hero + boss

we need boss music, and that music should play when hero enters boss room









we could display the dungeon key and map sprites on the worldUI to indicate those have been found
we should also be displaying the gold total on the world UI





Version 0.2 Milestones
	
	mostly done.
	record GIFs of spawn room + boss room
	create a markdown file for the repo that shows version 0.1 + features
	then it should show the progression to v0.2 + features
	include GIFs for v0.1 + v0.2
	
	
	
Version 0.3 Milestones

	pickup and throw
	
	
	
	
	
	
	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.

	add wall pillar decorations when room is built
	doors should have decorations around them as well

	hero should spin around prior to dying
	other actors should not do this, they should die immediately
	the dungeon screen should only start it's fadeIn if the hero is in his final sitting death state
	it should remain 'playing' while hero spins around

	add a boss music track, play it when hero enters the boss room
	we don't need to switch music tracks, tho we would like to
	if we can compress the audio enough, we might have room for this track - it would be nice

	
	alternatively, we could have the boss drop an EGG projectile, which takes a few frames to 'hatch'
	when the egg hatches, a blob actor could be placed there
	this would prevent the blobs from overlapping each other
	well, actually no - because an actor could overlap the egg as it hatches.. hmmmm
	
	
	implement a fireball projectile that moves across frames
	rotate the fireball sprite to face down (all projectiles + weapons should face down by default)
	this is spawned from the Y button press
	visually display fire magic medallion for current item in worldUI
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	create overworld screen, with selectable dungeon / shop locations
	these lead to DungeonScreen or ShopScreen
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Maybes / Ideas	

blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
or they can use a weapon, like a stick or gooey hand, iunno

debugInfo displays the floor index, instead of the # of floor tiles used currently
which isn't really a problem, cause we're going to optimize how floors are drawn later on

OPTIMIZATION
if we don't draw the floor tiles, the draw loop is much faster
so, we could standardize the room sizes, then create a floor sprite
then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	

OPTIMIZATIONS
	drop the sample rate down to 22k to save even more space on bkg music files
	the soundfx are already at 32k, so we know lower sampled audio builds and loads correctly


