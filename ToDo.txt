"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps
adding music:
	files are saved as .ogg and added to content pipeline, built on high quality.
adding sound effects:
	sound effects should be compressed down to 22K sample rate, mono, 16bit
CTRL + M, O = collapse functions/regions	
	


	
	
todo:

v0.7 goals

5 dungeons, with different enemies & bosses
but we'll need to complete the dungeon objects before we implement diff dungeons

DUNGEON OBJS, CASTLE DUNGEON, 2 castle enemies
FOREST DUNGEON, BOSS + 3 ENEMIES
CAVE DUNGEON, BOSS + 3 ENEMIES
ICE DUNGEON, BOSS + 3 ENEMIES
SWAMP DUNGEON, BOSS + 3 ENEMIES
LINK DUNGEONS TO OVERWORLD, RELEASE 0.7



13

Design Additional Rooms + Playtest
add to existing levels / new levels:
switch blocks + btns
floor switches
torches in groups of 4
spikeblocks eating away at massive groups of pots
explosive barrel puzzels










Fix Moving Objs vs Actors Bug - Part 2

if a roomObj is moving and collides with an actor,
the actor can't move and the obj continues to move,
which feels VERY wrong and buggy.

so, idea 3 assuming a system redesign:

what if we set the position at the END of the collision / interaction process
so the process would be as follows:
1. project movement
2. check collisions (act v obj, act v act)
3. check interactions (act vs obj, act v ent, obj v obj, obj v ent)
4. set newPosition & position (resolve movement / Align())

this way, we know newPos is projected position,
and position is the previous position, so we can
revert to a non-overlapping (prev frame) position when needed.
this allows us the functionality to prevent objs from running over actors.

basically, the above concept was implemented, starting with Pool.Update().
and tested using the belts, blocks, and actors test room.
however, entities / projectiles dont move using the current code.
so, i'll need to fix that coming up in the next commit.










bug: projectiles dont move
do they interact?




if an actor overlaps the hero, then the hero can't move
so ANY actor CANT overlap the hero, ever, for any reason
but other actor v actor overlaps are fine

stop collisions between hero and pet








floor spikes should blow up barrels.
bumpers should be more predictable (with room objs, ref bumper test room).



we also need to figure out what entity is being created
because we have a random rogue entity being created RANDOMly acorss frames without any input or actors/objs







separate debug info for collisions AND interactions
i'd like to see how many collisions & interactions averaged over 60 frames
part of the beta debug info






















bosses should always spawn as ActorPool index 2.
0 = hero. 1 = pet. 2 = boss.
this is to ensure we never accidentally use the last actor pool index,
which will be rapidly recycled in the event we run out of available
actors to Get().





trap doors should stop projectiles from passing thru
bounce them? hollow sound?






record gifs of:
	explosive barrels chains
	conveyor belt madness








what if the obj the hero picks up simply assumes the target obj's texture and frame, etc..?
this would work for actors as well, which sets the ground work for allowing the hero to pickup 
blob corpses and use them in some interesting way... like dropping them on a switch!
we already do this with pots essentially, but we need to abstract the carrying/throwing solution
to be more generalized and handle roomObjs, actors, or whatever we throw at it in the future..
	
	
	
	





Implement Bumpers with Actors?


When an object is being pushed by a conveyor belt,
and that object overlaps an actor, the actor ISNT pushed
and the object passes THRU the actor, breaking collision system..


bug with bumpers: when there are multiple bumper collisions per frame,
things get unpredictable, as in the case of a belt pushing an object into a bumper
or if an actor collides with two bumpers at the same time..
this needs to be fixed




floor switches should sort OVER conveyor belts





some spikeblocks move, the vertical ones
the horizontal ones dont move at all???








the process the game uses to handle the hero's items and weapons is flawed.
if the hero uses a bottle, it will work as normal, and become an empty bottle.
and the hero's item will be nulled out (at least in the hud).
HOWEVER, using the nulled item will result in an empty bottle reward being created,
and the hero being statelocked for 1 frame, then unlocked and free to move,
while the bottle floats around in the air. this makes no sense whatsoever.
//there are various other problems as well..
if the hero doesn't have an item or weapon equipped, he shouldnt lock into any state
upon an X or Y button press.. but he does.



report on the last entity created (uncontrolled creation of entity?)

spikeblocks dont work. they don't move. but they sure do collide with hero.
spikeblocks should be entities. upon a collision:
	kill spikeblockA, 
	create spikeBlockB in opposite direction
we'll need a gameObj to represent the spawn position and direction of the first spikeBlock tho..

fairies should be entities as well, not actors.
we need to change the net to check against entities too.
this will allow us to bottle fairies again.
collisions with the hero are easy, since the fairy is an entity.
	
Because of the new collision/interaction system, entities can't block!
so, we'll need to add a rule to gameObj.setType() that sets any entity.compColl.blocking to false.
	
	
	
	
	
Optimization

only the hero is collision checked against actors.
but we have complicated code to handle actor vs actor checks,
when we only need hero vs actor checks.
all other actors can freely pass thru each other.
	
	
	
	
	
bonus functionality:
	we can now push dead enemy carcasses with projectiles, and conveyor belts
	so we should change the sprite for the dead blob enemy.
	
	
	
	
	
	
	
Entities / Projectiles should have 'owners' or 'casters'.
	this is simply an actor reference.
	this means projectiles are MORE than gameObjs.
	where does this reference get added?
	this lays ground work for:
	boomerang functionality,
	excluding caster from AoE spell damage,
	tracking a sword to an actor across frames (conveyor belt)
	tracking overhead rewards to hero across frames (conveyor belt)


	allows actors to slide across ice with weapons as well







we have two approaches to how we determine if we evaluate a roomObj as 'moving':
1. we check the magnitude - simple, clean, but is a float check
2. we flip a boolean and check that - more complicated, but likely faster than a float check
lets go with 1.

add a magnitude check into Pool.UpdateRoomObjects()
then implement the rest of the psuedo code
then implement the roomObj vs roomObj interaction,
this is a roomObj vs roomObj check:
	blocking: prevent overlap
	conveyorBelt: pushes overlapping roomObj



what if we added a boolean 'moving' to compMove?
this would be a quick way to check and see if the obj is moving
























update the inventory screen in game to reflect the current mockup
this removes the stats values from the game / hero
and replaces them with more custom story items, like the warriors pass, etc..



























Dragging/Pushing/Pulling

hero should be able to 'grab' objects
if the object is draggable, then hero should be able to push and pull on it
this 'grabbing' state should last until player releases the A button
objects should inherit the movement of hero, 
and check collisions with all roomObjs, entities, & actors (expensive)
if a draggable object would collide, it doesn't move
this would have to be done per axis too, so we could drag along walls




in order to accomplish these two things, we will need to be able to compare a gameobj against the roomObjs
this starts with a collision check, then an interaction upon an overlap
we would call this from dragging / pushing / pulling, and conveyor belt checks


































PUZZLE IDEA
we could have a puzzle where a conveyor belt carries a bomb
along the conveyor belt is a switchButton
a lever is available to the player.
the player must turn off the conveyor belt at the right time,
in order for the bomb to explode close enough to the switchBtn,
which will drop the switch blocks, allowing the player to pass.


Implement Boomerang
this is a projectile that flys in a thrown direction
then upon hitting something colliding, returns to hero
if the something it hits is a pickup obj or fairy obj, 
then that obj/actor travels with boomerang back to hero
this item should be sold by the items vendor (for now)
if boomerang hits an actor that isn't fairy, it should push that actor, but deal no damage

boomerang's return
we'll have to get the direction to hero, like we do in Functions_Ai
the move the boomrang in that direction
the boomerang will continuously spin, so it doesn't have a movement direction
we'll need to update the rotationValue for boomerang each animation frame

attachment
how do we attach an obj/actor to boomerang? i dunno













--------------- lets push ---------------


COMPLETE THE PROTOTYPE BLOB DUNGEON

Enemies++
create tier 1, 2, 3 level enemies for dungeon 1
dungeons should have an enemy list for each tier
then upon room build, randomly choose an enemy type from the correct tier list

for the blob dungeon, we can have many different kinds of blob enemies, using the blob sheet:
blobs with swords
blobs with bow & arrow
blobs that plant bombs
blobs that shoot fireballs

for example, forest dungeon tier 1 enemies: blob, rat, snake
when room builds, any of these 3 enemy types can spawn on a tier 1 spawn obj
create enemies that fire projectiles - arrows, fireballs, bombs
we need a flying enemy - like a BAT













Dungeons++
link cave, forest, old castle dungeons from the overworld map
create dungeon sprite sheet for cave + forest + old castle levels
create enemies unique to the cave + forest + old castle
create bosses unique to the cave + forest + old castle



Music++
add overworld music
add shop music (town music)
title screeen plays title music

explosion sound needs to be shorter


Dungeons++
the exit rooms should be different for each dungeon type
but they should be the same for the dungeon type they represent
so the dungeon type feels consistent, but there is variety between dungeon types
dungeons should have names.
the dungeon name should be displayed on the map.
dungeon names could be randomly generated from a list.

Boss dialog + Boss phases
initially the boss should popup a dialog mocking player
after boss hits half health, another dialog should popup
this one talks about boss changing tactics
"you're better than i expected"
in the 2nd phase, the boss moves AWAY from the hero
so its harder for the hero to hit the boss
in first phase, the boss just randomly moves around

Boss Heads -> Crystals
instead of crystals, we should collect boss's heads.
this is the same icon that appears on the overworld map for the dungeon
this would appear in inventory screen where the crystals are, but there will only be 4
these should be located on the overworld screen
upon collection of 4 boss heads, the final dungeon opens
the blob boss head is actually an eye, the bosses eye
for now, the player will collect 4 eyes
crystals widget should be renamed 'bosses defeated', bossesWidget
we'll need to update the game display data + the LSN screen to reflect the update away from crystals
we can also make the overworld map wider, to better fill the frame out



dungeon rewards++
When the hero beats a dungeon, the only reward should be the bosses head, no gold.
gold is only acquired by defeating enemies (and later on, by betting on/winning tournaments)
text should read "press any button to continue"
remove 'reward' text





-------------- pushed --------------------













why did we model a fairy as an actor again? was this so it got some basic AI?
we could model the fairy as an entity much easier, and it would simplify
actor vs. actor interactions, as there wouldn't be any - it would simply be blocking collision checks




























add the waving emote into hero's sheet
we should use the waving animation on the load save new screen when we display the 3 games
currently we use a walking animation, which is boring af
instead the hero should wave
we should update the blob sheet to have a wave emote as well

the LSN screen should display the link hero if hero is link
should also display the blob character if hero saved game as blob
can we save the game as the blob character? is that in the save game info?









Make the AI system Behavior based, where a Behavior is an enumerator

actor.behaviors = new List<Behaviors> { Behavior.Aggressive, Behavior.Curious, Behavior.Destructive }
Behavior.Aggressive (actor will pursue hero without regard for safety)
Behavior.Attacks (actor will attack hero, if hero is close enough)
Behavior.Curious (actor will randomly explore the area around them)
Behavior.Destructive (actor will attack any destructible object it comes across)
Behavior.SpawnsMobs (actor can spawn other actors, based on actor.type)
Behavior.ThrowsPots (actor will pickup and throw object it comes across at hero)

an enumerator, and a list in the actor class.
then we modify the AI method to work based on behaviors.
if actor.behavior[i] == 
- aggressive, move actor towards hero, if hero is visible
- attacks, attack hero if hero is close enough
- curious, randomly move actor
- destructive, attack destructible objects nearby
- spawnsMobs, randomly spawn mobs based on the actor.type
- throwsPots, picks up nearby pots, carrys them, and throws them at hero if hero is visible






DungeonPillars
a blocking non-breakable obj to give the rooms some character
they can also be used to create the illusion of depth
(because hero can walk behind them)
but is it worth using up 2 spots for one object with no purpose other than decoration?





Enemy Hit ++

when we hit an enemy, we should display a very specific hit particle
this is the frames:
new List<Byte4> { new Byte4(5, 1, 0, 0), new Byte4(6, 1, 0, 0), new Byte4(7, 1, 0, 0) }



Entities++

WanderingFire 
this is just like spikeblock except the obj.direction is chosen randomly upon collision
the direction cannot be the current direction however, and can only be cardinal	
should be able to place wandering fire using tools widget




OBJECTS:

conveyor belts should sort over down switch blocks
this means conveyor belts should sort above -32

Destroyed Debris object
the dungeon statue should become the destroyed version upon destruction.
any object that can be destroyed should become this object.
this object should look like a pile of rocks. can be pushed.

Circling Stars
just like Lttp, the circling stars turns hero into an enemy actor type
except, it's not on a timer. hero becomes enemy actor type until Circling stars collides with hero again.
this is a check: if hero.type != hero, become enemy, else become hero.

BUG - PITS
if an actor overlaps two pits at the exact same time
they can be pulled into each pit, resulting in a cancelled out pull
leaving actor hovering over pits, which is bad
*which could easily be fixed by using a weaker pull on the left for all pits
*the actor would slowly be pulled into the right pit, 
*then quickly pulled once they dont collide with left pit any more

**** COMPLETE DUNGEON OBJECTS BEFORE CONTINUING ****




for the ice dungeon, procedurally add ice tiles to each room
if ice tile overlaps with a pit / bridge / floor spikes / cracked floor, remove it
this can be done in the cleanup of room
and we'll probably need to expand the max size of roomObjs



implement a level 2 magic spell
this would deal 1 damage to everything on screen
and play explosions randomly inside the room
should be named bombos, sold by magic dealer

potion that makes hero invincible for a period of time
how is this visually represented?


























Fairies++
we need fairy soundfx for when fairy dies (absorbed or captured).
fairys should have soundfx for when they are hit

NET++
add a swipe sound effect for net

WorldUI++
when the hero's health changes, the worldUI should animate hearts individually
if the hero gains 5 health, each heart should scale up, then animate down
once that heart's scale reaches 1.0, then the next heart can animate
this sequential scaling should happen anytime hero's health changes

need a dungeon statue destroyed obj
need a 'base' object that sits underneath skullpots
skullpots would then become this base object upon destruction / lift

















need an on screen dungeon timer (for dungeon levels)
upper right corner, simply draws the DungeonRecord.timespan value
this should display down to the ms
this should only display if level is a dungeon
	
dungeons can have deep water (sinks) and shallow water (just has wading fx)
and we can build puzzles around this, because it's impossible to tell them apart
but we should be able to tell them apart, with some kind of shallow water lighter color difference
this is important to do now, because it affects the layout of the dungeon sheet

where do we display the kill ratio?
this is displayed in a stats widget somewhere that hasn't been designed yet
equation for determining skill rating in percentage.
this is: total enemies killed / damage taken
ex: 10/1 = 10.   245/73 = 3.35.


we need to make sure we're checking if actor == hero, and not if actor.type == hero in various routines
interaction routines


NPCs should change their dialog based on the hero.actorType
if hero, then NPCs act normal
if blob, then NPCs act disgusted, wont sell

we need to create a blob safe level, where blobs have their own vendors + guide
this allows the two storylines to co-exist and proress seperately





DungeonDesign - Taking it Further
design dungeons as a whole
dungeons should have a theme
there should be 'architectural puzzles', where the dungeon changes in some way
this could be raising/lowering water levels
moving forward/backwards in time
destroying parts of the dungeon/rooms
using switches to alter the paths thru rooms, or alter the nature of rooms
















v0.8 goals


Outdoor Levels
outdoor levels are handmade, and not rectangular in design
so they can't be generated procedurally 
we'll need to create a "level editor" similar to room editor
lvl editor will have more objects to place
lvl editor will also place floortiles
*which means we need to save floortiles to XML
*which means we need to load floors + rooom objs from XML
*this XML should be seperate from roomDataXML
*levelXML? these can be loaded into Assets.LevelData list

outdoor levels to build (part 1):
colliseum 
left town A, B, C, + Church
castle gate
ship


Outdoor level objects
level objects exist in a level sheet, which is a dungeon sheet
however, a level sheet doesn't necessarily have to follow the dungeon sheet layout
this is because outdoor levels will have unique objects, and no dungeon objects
each level will have it's own unique objects, which will be enum ObjType values
which means that Obj.SetType() will grow alot...
consider creating Obj.SetDungeonObj() and Obj.SetLevelObj()
this would help to break up the monolithic SetType() 
SetDungeonObj() and SetLevelObj() would be called from SetType() based on ObjGroup/Type


OutDoor Levels ++
For each dungeon, we need an outdoor level that displays the dungeon entrance
this makes it feel like the player is entering the dungeon, instead of just spawning into it
cave, forest, castle ruins, castle entrance

Overworld++
add tiny smoke particles coming out of some houses
add 'floating' animation to ship (should bob up and down)
this means it needs to be a sprite in the main sheet
make castlel ruins look more 'ruiny'





Dashing++
what if hero took double damage when they dashed?
we could scale up the first heart when hero dashes
then if they get hit, they take whatever damage they would normally take, but also lose the first heart
so dashing is kinda like a small gamble each time.





Improve Hero falling into Pit++
when hero 'lands' after a pit fall, he should be put into a sitting position
then he should take a few frames to 'standup', before finally returning to standing idle
this should all be facing south
this should be an animation list + state
this state and animation should exist for all non-boss actors






v0.9 goals

complete story outline + plot

Letters / Notes 
we could also use the map scroll sprites as a display for letters
from the hero's wife or whatever
this could serve as a way to remind player of story too
player could read a scroll and get caught up on the main plot points
> wife leaves hero, hero'c cause/journey
> invitation to final tournament, with 4 boss head requirements
these scrolls could also popup when the hero gets them
displaying alot of dialog / story plot points


implement dialog system and event booleans to track events in game

Create CheatsScreen - or this could be part of game ctrls










Crypt - optional dungeon + level

there are 8 floors to the Crypt - upper floor, the burial crypts, dungeon x 6

the upper floor
a large room with NPCs that explain what the crypt is (keeps bodies of gladiators + records)

the burial crypts
a large room of gladiators who achieved glory in battle via some record
for each record you break, you get to open that hero's tomb and take what's inside
one of the tombs opens to reveal the crypt dungeon (opens when all 4 crystals are obtained)

the crypt dungeon
this is a vertical dungeon down, with each level containing harder and harder enemies
this is basically a diablo1 rip off, with 6 levels down
at level 6 hero fights the crypt boss
crypt boss is a massive bullet sponge, and spawns just tons of adds in a large hub sized room
there are also magic attacks going on, so the room is filled and very hectic to manage
there should be multiple phases to the crypt boss, a truly legendary fight.
beating the crypt boss unlocks a special tomb in the crypt for looting





Boat

takes hero to different islands
if hero is blob, then secret blob islands become available (like blob home island)




Training Center
this is a place where you can train your hero or his team of gladiators
can train against any enemy 1v1, including bosses that have been beaten
this happens from a menu selection
you can also spend gold to increase a gladiator's stats
which you can then bet money on later in the colliseum



Colliseum
should have different kinds of tournaments
some tournaments will be 'to the death', which always have higher payouts than normal
gladiators that lose a battle, die in the game











Idea for a Tool (much later) - Colorizer

loads in all the textures for the levels in the game
select a level to see an example of it in use in a window frame
also has a color picker that allows you to set the color pallete used for the level
this would map the tonal grayscale values used to a list
then map the user's input colors to a list
then display the user's input colors based on the grayscale colors, using comparison lists
should also allow the user to save all the files as a set, named a specific way, to a folder
this would allow user to have complete control over the grayscale to color transition for release.

crazy awesome idea for a color scheme picker:
a central slider selector, with additional unselectable sliders around it
as you move the central slider, the other sliders move with it in parallel
should have an offset value, which controls how far apart the sliders are from the central slider
this would either spread the color scheme across the spectrum, or limit it, dynamically
of course, the example room with the level's display colors should be updating each frame
should be able to save the level's color values, or the game's level's color values
this would allow for the keeping of the sprite sheets in grayscale
and allow for the color mapping to occur independently of sprite development.


Awesome Idea: a display color pallete, mapped from grayscale values.
this means that all levels would be saved in grayscale.
then when the level is loaded, the display values would be set based on level type
the level's grayscale display value would then be interpreted into color
simply based on a list of color values, which could easily be changed and shared.

-how would this work? we would need a texture instance for the current level.
upon level load, levelsheet would be copied (bit by bit, not by reference) into the texture instance.
then the colorizer algorithm would run with the grayscale as target and color list as input.
it would change each grayscale color into the color equivalent based on the color list.
the level would finish loading, then the display texture would be used for the roomObjects







	
PROPERTY IDEA
Complete a long and difficult side-quest to earn a property that generates income (gold).
the player needs only to collect the gold regularly to purchase anything they want, eventually.
	



MOAR STUFFS TO DOs
	

	
title widget functionality ++
	audio/input/video/game ctrls - creates appropriate screen

audio ctrls screen
	sfx volume
	music volume
	
input ctrls screen
	bvisual representation of button controls
	
video ctrls screen
	full screen or windowed?
	
game ctrls screen
	how camera moves - follow hero or center to current room? 
	we only need to flip Flags.CameraTracksHero boolean
	
	
	
	
	
Handling corrupt game files & first run setup - part 2

if a saved game file has correct XML headers, then game will load it
any fields that match to saveData's fields will then be loaded
theoretically, we could load an XML file that has no correct fields,
and the game would never know.. 
this makes it impossible to check if the loaded data is corrupt or accurate.
only XML with malformed opening header tags will fail to load.

we need a way to check that the loaded xml is actually a game file

create a saveData instance, set all it's fields to null
then load the saveFile into the null saveData
then check each field of the saveData to see if it's not null
if any field is null, then the loaded saveFile was corrupted
however, we can probably extract some data from the corrupt file 
so we could prompt the user with a dialog that asks 'load uncorrupted data?'
'the file i loaded is corrupt. should i try to recover it?'	
	
	

	
	
	
	
Polish

	implement the following items:
	item boomerang - just like LttP boomerang, hits an enemy for 1, can 'collect' pickups
	weapon staff - creates a magic orb projectile, if magic is max, else has an attack of 0, but pushes
	equipment pearl - wtf does this do in game?	


	minor bug:
	the loadout animates the loadout menuItems
	when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
	this leads to a double scaling down effect, which shouldnt happen
	we shouldn't be able to select loadout menuItems.
	this solves the scaling issue, and it doesn't make sense to be able to select them
	selecting an item should only equip it

	polish hearts and magic world UI
	if the hearts change value, play the heart refill sound
	if the magic changes value, play the magic refill sound
	if hero uses magic, play the magic use sound
	
	Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.
	
	what if we pushed the hero a little bit in the opposite direction of the fireball being cast?
	this would make it seem like the 'weight' of the fireball pushed him back	
	
	instead of an unknown menuItem, we should have a 'purchased' menuItem for items that have been bought	
	
	REPLACE BOSS MUSIC	
	re-mix the boss music, making drums much less prominent in the mix
	also, mix the drums down to mono in session - we're getting phase issues when we convert to mono later

	puzzle: conveyor belt that pushes the hero away from something
	solution: hit the switch, turn the belts off, so hero can move around
	we could even put them on a timer and play a timer tick sound, suspending the music
	
	Stats MenuItems? Or Help Menu?
	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	we could add a spear projectile for blob enemies

Stuff that needs to be done, but it's not terribly important rn	

	
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.
	
	implement additional weapons / items
	weapons : { staff, axe }
	items : { lightning, boomerang }
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, i dunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


	
Look at how stardew valley engages players
	theres so much to do and explore
	we need more to do and explore
	should be able to have a pet, like a dog
	should be able to speak with more people/npcs
	should be able to manage traders, adventurers, etc.. like assassins creed blackflag minigame
	should be able to craft advanced items, using special parts + gold
	just a ton of additional stuff layered on top of the dungeon running, that is supporting core gameplay
	

	
	
	
	
	







	
