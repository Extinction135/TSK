
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


VisualStudio Shortcuts
F12 + selected word = goto definition
CTRL + M, +O = opens, closes regions




Roadmap

0.77 - Overworld added, temp levels setup, COLOR.
0.78 - ShadowKing coliseum, town, blocked shadow dungeon entrance
0.79 - Forest Islands
0.80 - Lava Islands
0.81 - Cloud Islands
0.82 - Swamp Islands
0.83 - Death Mountain Islands
0.84 - Thieve's Hideout
0.85 - Shadow Dungeon, Shadow King fight


0.86 - port to Switch
0.87 - sidequests + hidden Ganon story
0.88 - hidden blob story, etc..
0.89 - ???


Video To Make -
playthrough videos
development videos
intro to codebase / systems design
overall design & direction of TSK
thoughts on zelda franchise
seperating collisions + interactions

























Today:












Editor++

current sheet button needs to be renamed to widget display.
done.

ignoring boat objects would be useful too - this helps when
working on beat sea levels, plus the interior floors of the
homes are the boat floors, so bonus: this also ignores house
floors, making moving furniture around inside houses much easier.

added Flags.IgnoreBoatTiles. modeled after ignore water tiles.


*coastlines have been added to the water tiles that are ignored
by Flags.IgnoreWaterTiles.


boatobjs are now ignored in selection routines, and deletion
editor routines. along with the ignore boat button in editor 
menu. test -> working as expected.














Roof Options

** we can make hiding roof tiles a menu option! not an editor thing,
but an ingame preference. this is easy to do. and helpful in our editing
case. we only need to flip the Flags.IgnoreRoofTiles boolean to true or
false, via an options screen button.







Editor++

fire the main game loop once after loading roomData
call Functions_Pool.Update(); 
then teleport the camera.
this will place link in the level and update the camera to his
pos, so the level loads in a more proper manner.










The Axe

I'm straight ripping Kratos' axe here. This is an obj
much like the boomerang - thrown by Link. once it reaches
max distance, it falls to the ground. this isn't far.
pressing Y aggain then returns the axe to link's hand,
at maximum magnitude, through anykind of object or enemy.

notes
if this projectile is moving, then it has interaction checks
with actors and roomObjects. if it is not moving, then the
axe is laying on the ground and is ignored.

*axe in hand, axe in air, and axe on ground sprites all added.

the axe must become MAGICAL before it will return to link.
so we have two axes: axe and magical axe. two different behaviors,
but one item, essentially. the axe just dupes sword behavior,
but when upgraded to magical status it becomes kratos' axe.
*axe should collide and collect pickups for link upon returning,
and throwing (while moving, basically). so, lining up the perfect
group of mobs and pulling an axe thru them also rewards the 
player with some of loot instantly. no elemental aspect to this
weapon please - no fire or ice or poison affects. this is a 
simple throw, wait, call item with specific destructive power
that keeps it in check.



























Dirt + Grass Transition Tiles

we need dirt floor objs. we could also use grass to dirt 
transitions, as the coliseum landing requires this to match
overworld, plus we could build paths thru the grass later
using these objects. so, very useful.


Coliseum++

we also need 'windows' that look into the coliseum,
like the overworld sprite depicts. plus, I don't like
how the coliseum level is unbalanced and to the right.
instead, the coliseum - and all subsequent coliseums -
will be entrance centered to level, north of spawn.
this 'presents' the level much better, because coliseums
have no required puzzle for entry.





Wire Fences

they don't line up, because we built them the wrong way conceptually.
design them based on the wooden fences that actually work, you doofus.









Brandy++
*brandy should provide some tip or clue about each level
that she's on. we can do this simply by checking the level's current room ID.
then selecting the proper dialog string.










DungeonEntrances++

*create forest dungeon entrance objs + level details
*create swamp dungeon entrance objs + level details - SLIME obj

we can do the slime obj rn - this just drops player mobility to 
pushing/dragging speed upon contact. super easy. then update the
swamp level, so swimming thru slime is annoyingly slow.



release 0.77?










Islands++


*create lava dungeon entrance objs + level details - LAVA conveyor belt objs












































all dungeon entrances - these need to be specifically defined
they are not implemented properly, as they assume each entrance
exists in the same location on different sheets. the logic handling
this is wonky too.





How do we do Dungeon Entrances? properly.

shadow: from water + ship, into animated shadows (hard) - all black obj 
forest: from water, thru large rock teeth, water bushes (med) - under rock formation
mountain: from water, climbing up mountain to cave (easy) - into cave
swamp: from sea, thru slime, short climb up mountain side to teeth - to darkness

town level should be renamed and remade: smaller houses,
npcs inside and outside, no water features.

skull coliseum: entrance is 3x4 door obj, with skull decorations.
coliseum walls build a rounded exterior appearance.
























Color++


create color version of forest, swamp, mountain dungeons
update those sheets - these dungeons can have unique wall colors








art++
remove orange/red from coliseum spectators
make spectators much more brown and less obvious
















editor++
signpost shold be part of env objs widget (is part of dungeon widget)





Textures Refactor

text sheet - this can be 256x256
entities sheet
ui items sheet - this can be 256x256
common objs sheet

(these are 256x256 sheets now)
forest dungeon sheet
lava dungeon sheet
cloud dungeon sheet
swamp dungeon sheet
mountain dungeon sheet
thieves den dungeon sheet





Art++
grass that is burned should become a different sprite,
like a burned grass sprite.







*** add coliseum enemy widget to editor, to contain creature
challenges coming up soon.





specific island sheets, when needed

dungeon entrances sheet? or per obj, standardized to
128x128 sheet? which is massive btw.. and we can repeat it,
if the sprite is repeatable horizontally, for even larger
entrances....











more overworld locations TODO:

skull island sub path (2)
952.567 -> up neigh = skull island bottom row 4
991.591



crest path (4)
880.692 -> up neigh = forest island main path 4
928.707
975.692
988.720


fishermans path (forest) (7)
782.549
-> lneigh = lava island main path 2
-> rneigh = forest island main path 1
719.621
682.682 - fisherman's house
725.660
752.693 -> rneigh = forest island main path 6
730.724



water coliseum path (forest) (6)
645.575 -> up neigh = lavaisland main path 4
612.589
571.585
536.609
565.644
530.671

temple 1 path (2)
514.591
480.581

water coliseum level (connected to path above)
499.706

lava ship 1 path (2)
567.455 -> down neigh = lava island main path 8
572.406


lava cave 1 path (3)
508.538 -> up/r neigh = lavaisland main path 7
458.545
420.522

volcano coliseum path (6) (left to right)
150.522 -> up neigh = lave island main path 15
113.530
99.553
138.562
180.562
217.571 -> right neighbor = forest main path 27







plateau island main path (12)

plateau island misc paths (2)

plateau ship path (2)
299.629
255.616

lava sub path (7)

lava ship 2 path (1)

lava cave 2 path (2)

lava cave 3 path (2)

lava to cloud connection (5)






SWAMP LOCATIONS+++
DEATH MOUNTAIN LOCATIONS+++
THIEVES DEN LOCATIONS+++
























New Levels

there are a few base levels we need to make first, that are
essentially ready to go:
port town: all the vendors / npcs + farmer.
mountain dungeon entrance + dungeon.
forest dungeon entrance + dungeon.
swamp dungeon entrance + dungeon.
shadow coliseum: as is coliseum for now.

these levels should use objects with full color,
including the dungeons, enemies, and bosses.





UI Color

transition the UI into the current color pallette.
we will not make this color pallette modifyiable - hardcode it.
but it needs to look good.





Title Screen

replace text with "The Shadow King" in big text. no allusion to
LOZ or Nintendo yet.



Release 0.77. Overworld and Color implemented.















Overworld ++

locations should have a camera offset. so, when link lands on
a boss location, the camera centers on the skull, instead of link.
we can also do this with special locations, such as the cloud castle:
the camera should focus on the castles, panning the right.
this shifts the focus off of link and onto a specific obj in overworld,
drawing players attention to it - saying 'hey this is important'.

locations should be named on the map - this will help knowing each
location and how they are connected, and will aid in development.
however, this should be a static ui element overlay, that changes when
links lands on a location. thus, locations need string names to query.

a dungeon is composed of rooms, a field is a large room. we can
chain fields together using objects, similar to how we make dungeons.
this allows for a series of fields leading up to a dungeon or target.r

locations are connected to each other via a line (ref theorem code).
this allows the player to visually see where they can go, while also
allowing for easy debugging, since the lines show the neighbors.
if these lines are calculated each frame, and only for the current locations
on screen, then the locations can move around and be animated while
still properly being connected. link should track to his landed location
each frame as well, in case it moves around. we can even have location connect
dynamically, if they are close enough together. this would create a window
of opportunity for the player to move to this isloted location, which could
be useful or interesting in some way later.






























initial level : at sea, boat is attacked, link uses his sword
to defend brandy from attackers. the ship cannot be left (stairs up).
once the attack is over, brandy converts to mission complete obj.
talking with brandy then ends the intro level and takes us to skull
island overworld location.

skull island - final boss, coliseum, vendors

link talks to the shadow king, who confirms that he holds brandys
love in his prison of death. the shadow king agrees to release 
brandys love if link brings the shadow king the 4 mythical beasts,
and defeats them in his coliseum for tsk's entertainment.
this sets the stage for 4 dungeons, then 4 boss battles.

undead island? we have graveyard enemies.
we could put these on skull island as special coliseum
fighters? secret skull island dungeon?

anyway, link defeats the 4 dungeons, beats the 4 bosses,
then confronts tsk, and demands brandys love be set free.
tsk laughs and then they battle. after battle, tsk tells
brandy the only way for her to see her love again is to
pass on to the other side, which she agrees to do.
link says goodbye, brandy becomes a ghost.
the final image is the boat sailing away with caption
'link continues on his quest..'

brandy's silver locket contained a map of these islands,
which brought brandy there. she knows her lost love is
somewhere on one of these islands.





we should change how dungeons / bosses work.
unlocking the boss door should exit the dungeon,
placing link at the boss location. each boss battle
should take place in a field, where the player has
the option to exit anytime they want, plus they have
more space to fight this larger / harder enemy in.

this means players kind of 'save progress' once they
beat the dungeon, and dont have to suffer through it
again if they dont want to. also, they can fight that
specific boss anytime they want, in a level designed for
that boss battle.

when the player "beats" the dungeon, part of the skull
should collapse, revealing the boss location, which is
now linked to the entrance location.






notes
*all game objs ref the main 1k sheet.
themed objs ref their specific sheet,
set in Obj.SetType().







post-release notes:

only spawn 1 floating eye in forest dungeon rooms.

if a room with a switch in it has been solved, (visited)
then remove the floor switch obj post room build.

if player has the map, dont spawn the miniboss.

fix those really hard column and row rooms.
make more versions of really easy row and column rooms.
we need more room data overall.











Actor Refs

a projectile's caster should be an actor reference.
if a projectile's caster is null, then it should have no behavior.
this is because some gameobjects cast projectiles,
but in that case the projectile wouldn't have any behavior
related to the caster.

this simplifies the current system for handling projectiles,
which uses the moveComponent. using this moveComp, projectile.update
attempts to prevent projectiles from ovrelapping with their casters,
but this is based on the compMove and not the hitBox, which is
actually the target of importance. we need to have access to
the entire actor object, not just it's compMove! we need to
touch the actor's hitBox from projectile.update, and we can't currently.
once we do this, we can check and align projectiles to the actor's
hitBox, and then larger enemies can have larger hitboxes while also
being able to cast projectiles...
plus, projectiles could properly implement their behaviors - by
tracking the actor's hitbox instead of their newPosition..

Improve Projectile.Spawn()

*miniboss cant shoot fireballs south - why?
?= pro.spawn() assumes that the actor's collRec is 16x16 - it shouldn't.
this means only 16x16 actors can safely shoot fireballs without damaging
themselves, which is some valve level stupid. this method should take
the actor as a parameter, and then we should base the offsets FOR ALL
PROJECTILES off of the actor's collision rec width and height. this
would allow larger actors, like bosses, to SHOOT FIREBALLS. geez.

Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye: spawns A TON of exploding seekers while in his special.




