CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

goal: 13 commits/day

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe PP interacts with Actor/Obj in InteractionFunctions.Handle()
	
	
	
	
todo:


2


updated summary screen to display all record data, tho we don't have accurate enemy or damage counts yet.
changed DungeonRecord from being a struct to a static public class, so it's accessible from everywhere.
added a Reset() function to DungeonRecord, which is called from DungeonGenerator.BuildRoom().
updated all references to DungeonRecord across multiple files.
removed the DungeonRecord parameter from SummaryScreen constructor.
updated ActorFunctions.SetDeathState() to track the deaths of all non-hero actors that die.
tested, tracking death of enemies correctly.


//if projectile damaged hero, track the damage dealt
if (Actor == Pool.hero) { DungeonRecord.totalDamage += damage; }



where can we determine/track where an actor (not hero) has died?




populate the dungeon record with data
	enemies killed
	damage taken

where should we track actor deaths?
and how do we not track the hero's death?


where do we track when an actor takes damage?
we could use WorldIUI to set the dungeon.record.	
	
	
	
do we need to dump any additional info to the debug panel?
the summary data that we are tracking should appear in the debug panel
this is so we can make sure it's accurate




whats the reward formula?
	time bonus + enemies killed - damage taken
	time bonus is based on how many rooms are in the dungeon.
	total dungeon rooms - total minutes = gold multiplier * 100.
	this expects the player to clear a room a minute.
	







Version 0.1 Milestones

SOUND AND MUSIC
	when actor dashes, play dash sound
	when actor attacks, play attack sound
	when actor is hit, play hit sound
	when actor dies, play destroyed sound
	won state should have a happy jingle
	lost state should have a sad/evil jingle
	if hero has low health (<2 hearts), play drum track
	play the dungeon background music (fade out and stop when won/lost screen appears)
	fade in bkg music when dungeon is restarted/remade
	
RELEASE v0.1
	record .gif of playing through dungeon room for v0.1
	show summary screen, should be a 'dungeon complete' state



	
	
	
	
	
	
	
	




	
	
Version 0.2 Milestones

	build an actual dungeon, with multiple rooms, a key, boss door/room
	
	create a boss actor (this is just x2 spriteSheet with same actor anim layout)
	actor is processed just like other actors



	on sword collision, create a hit particle
	create hit particle gameObject
	add to gameObjFunctions.SetType + ProjectileSpawn

	implement a fireball projectile that moves across frames
	rotate the fireball sprite to face down (all projectiles + weapons should face down by default)
	this is spawned from the Y button press
	visually display fire magic medallion for current item in worldUI
	
	when a blob is destroyed, a destroyed effect should happen, and loot should be dropped
	which means we need a destruction particle effect
	which means we need to create loot items
	
	hero should be able to pick up basic loot items (hearts, gold)
	which means hero should have a gold int
	and we'll need to check collisions between hero and projectiles (items)
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	create overworld screen, with selectable dungeon / shop locations
	these lead to DungeonScreen or ShopScreen
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	
	
	
	
	
	
	
	
Version 0.3 Milestones

	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
	
Maybes / Ideas	
	
	
	
blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
or they can use a weapon, like a stick or gooey hand, idunno


each actor should have a weapon enum

	
debugInfo displays the floor index, instead of the # of floor tiles used currently
which isn't really a problem, cause we're going to optimize how floors are drawn later on

OPTIMIZATION
if we don't draw the floor tiles, the draw loop is much faster
so, we could standardize the room sizes, then create a floor sprite
then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type
	
consider adding a single frame of a crouch to the dash animation
this would create some anticipation in the dash animation

load in a background sound file (to determine how much space this will take up)
this file should be loaded into the SCREEN's content manager
a screen's content manager should be unloaded when the screen exits
this allows us to load different music for different screens, without touching assets.cs

this sound file should be a set number of bars long, at the standard length
this should be mono, as compressed down as you can
can we use mp3? that would be ideal
does an mp3 get uncompressed when loaded into game? 

re-export sound files aligned to specific bar requirements
this will require some rewriting / restructuring of melodies and chords

sound manager should be handled just like screen manager
part of game, passed as ref to each screen
so a screen can just say "soundManager.whatever()"






