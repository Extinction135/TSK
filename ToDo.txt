
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	98mb on Win10. 98mb on XboxOne.
	
	
	
	
	
todo:



(Work on DirectX project until Release)


2 moar commits!









Fix counting issue with RoomObjs

updated GetRoomObj() to return only objects with .active = false.
this is done by looping thru the roomObjs starting at 0, looking for inactive obj.
added routine to count all active roomObjs at the end of CleanupRoom().
this count only runs if the DebugInfo panel is being drawn.
playtested, working as expected.

fixed some garbage creation in CleanupRoom().








we can't fix counting issue with entities
but we can return an entity that has been released (inactive)






Efficiently Using GameObjs + Floors

we can use obj.active to track if an obj is currently being used or has been released
ReleaseObj() - should set the obj.active to false 
GetObj() - should loop thru roomObjs, find first obj with active=false, return this obj
*we should be counting forward and looping back, not starting from index0 when checking .active property
*this makes the method slightly faster, as it's more likely that the next obj is inactive vs. the first obj being inactive
GetUsedCount() - loops thru roomObjs, floors and counts all active/visible to correct counter
*this fixes the counting problems we see in info panel
*this should be done at the end of a room build/finish

Fixing the Entity Reuse problem
if we are using a lot of entities quickly, old entities get recycled before they have a chance to complete their life
for example, bombs can just disappear instead of exploding
this is related to how we GetEntity(), which simply loops thru the pool, returning the next obj
this does not check to see if the obj is inactive, which it should
and when we ReleaseEntity(), the obj.active boolean should be set false

the entity use counter will simply continue to increment as it does currently








dungeon rewards++
When the hero beats a dungeon, the only reward should be the dungeon crystal, no gold.
gold is only acquired by defeating enemies (and later on, by betting on/winning tournaments)
text should read "press any button to continue"
remove 'reward' text


polish++
floor spikes should push just like spike block
collision particle should center to the spike block upon collision


overworld++
overworld dungeon icon is the boss of that dungeon
so all dungeons should display a blob character instead of a skull



















Chests++
we can keep the key + map chests, because we can check the booleans to see if these chests should be empty
we can simply empty these chests if we need to, so hero can't farm them and the room seems persistent
however, we can't have heart piece chests (sold via vendor instead) or gold chests (rewarded for killing enemy or beating dungeon)
so those two chests will have to be removed
* the map chest will always exist in the hub room
* the key chest will always exist in the key room
(so we should be able to place chests in editor, but the chest type is based on the room type)
(this allows us to create puzzles to the chest)

remove all chests from hub room (procedurally added)
create chestDefault object - this will become a map or key chest when room is built
update HUB roomData with a chestDefault object
update KEY roomData with a chestDefault object
update FinishRoom() to set the chestDefault to map or key chest based on room type



Update item vendor to sell heart piece / HP upgrade
this is the only way the hero can increase his heart count
should we sell entire hearts instead of heart pieces? yah, for 99 gold.
this means we can get rid of heart pieces in main sheet, and only keep the whole heart sprite
this means we don't need a heart piece graphic in the inventory screen / loadout widget
* this opens up a slot for a side mission item that we could display here
* this means we could only have one side mission 'assigned' at a time, tho, which is fine
* we could put this side mission item in a secret room, then check the sidemission boolean to hide it if hero returns to room










hero should be able to interact with level
this interaction changes lever to off state (flipped horizontally)
this causes all spikefloors to turn off (down animation, no collisions)
we will need: spikeFloorsOn, spikeFloorsOff, leverOn, levelOff

leverOff should also turn off all conveyor belts
this changes all conveyor belts to conveyorBeltOff
this has no collision/interaction with hero



falling into a pit is just instant death
hero just dies, no damage is dealt (no fairy can be used)
ends with 'you died' screen
hero is set into hit state and scaled down to 0
at 0, the hero dies

this should also happen to enemies (instant death, no loot drop)

we should prevent enemies from moving into pits / spikes on their own
they should be able to be pushed into them, however






Dungeon generation part2
here is where we actually create interesting, random dungeons.
create a path from exit to hub.
create a path from hub to key.
connect boss room to hub, so player knows where boss is early on.

i norder for rooms to be 'consistent', we'll need to store the index selected for the XMLroomdata list
each room should have a XMLid int. this is the xml roomData list index for this room.
when the dungeon is created, all the room XMLid values are assigned.
then when a room is built, we choose the xml roomData list at [XMLid].
this means the room will be built the same each time hero enters it



Dungeon Map

create a dungeon map that shows the room layout.
by default, set the dungeon map to true (for testing right now)


Dungeon generation part3
add secret rooms (via bombable walls), randomly place gold/heart piece chests
add routine for populating secret rooms (similar to populating exit room)
add additional unnecessary distraction rooms
place a chest with map in random distraction room.


handle the dungeon map boolean properly
if hero finds the dungeon map, flip the boolean true
by default it should be false
we should be able to set the boolean true using a topMenu button
if hero has the dungeon map, display the dungeon map with select button.





POLISH





WorldUI++
we should be displaying the amount of arrows, bombs in the worldUI
this way user can see how many they have left

there should be a little fireball particle created when hero lights a torch




SOUND POLISH

the light fire sound effect should be louder
the reward sound effect is WAAAAY too loud

we should not be able to call the same soundFX multiple times from one frame
this causes the sfx to layer upon each other, drastically increasing their volume
this is BAD BAD BAD








Bug Fixes

BUG
if we're using ALOT of entities quickly, then a state happens where 
- a bomb may just dissappear before it can explode
- a fireball may dissappear before it hits anything
we should be able to mark an entity as 'important' so it isn't released until it completes

Bug
when a game is loaded, we need to set the hero's loadout to be default
sword, no item, plain cloth
there is a bug where we can set the hero's loadout on one file,
then load a different file, and the hero's loadout hasn't changed
this lets the hero have a bow and fireball on a game where he doesn't have those items..



bug: hero creates a sword projectile on conveyor belt
hero is moved by conveyor belt into his sword projectile
he takes damage. this should not happen




RELEASE
update the readme to reflect the directX port
"A 2D zelda clone, using Monogame 3.6, for XboxOne, Windows7, 8, & 10.
DirectX version uses .Net 4.5 & SharpDX.
UWP version uses .NetCore & SharpDX.
OpenGL port coming soon."

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
release version 0.6 with complete dungeon & enemy variety.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

record a video playthrough of the game as it is right now
consider updating the overworld map to look better too







Fixing the UWP project RoomData issue
we can create a method that takes the loaded xml lists and writes them to a .cs file
then we can include this .cs file (or files) in the UWP project
this way we bypass the need to copy the XML roomdata to the installed directory
instead, the xml roomdata is compiled as a class and then fed into the Assets.xmlRoomData lists
we may even want to do this for all projects, since it's likely faster than loading + parsing XML






EnemySpawns and Enemy Types ++
a level of 1 means the easier enemy is placed here, and so on
we will have 5 levels of enemy in each dungeon
we will need 4 additional enemy types to fill out the enemy roster
create enemies that fire projectiles - arrows, fireballs, bombs





complete gameobjects

we'll need to be able to store the obj's direction
how often do we need to do this? prolly all the time...
well, actually not really - what objs use direction?

these objs 
conveyor belts - NSEW - this means there will be 4 objs saved/placed
spike blocks - EW, NS - this menas there will be 2 objs saved/placed
 
we should have an explosive barrel - of course!
just like bomb, but stationary, waiting for collision

Cracked Floor pit opening
we can also have a cracked open floor obj that sits over animated liquid
this varies the 'pit' style a bit

need horizontal bridges

Spikeblocks++
we should be able to create vertical and horizontal moving spike blocks
include an arrow over the spike block as indicator
write interaction routine for PitAnimated
this should work similar to conveyor belt, except it pulls hero towards it's center
if spikeblocks do not collide with the room rec, reverse their position
this prevents spikeblocks from flying out a door

create ice tile (no working for now) - changes friction

add pot throwable obj, just like skull obj

conveyor belts should move other game objects, like consumable items
or other objects, like bumpers and spike blocks	and explosive barrels

we should be able to turn the conveyors on and off
	this allows us to build rooms with additional complexity
	perhaps the switch turns the conveyors on/off?

	
	
	
Vendors++

Add hearts to vendor items
player should be able to purchase heart pieces from the vendor, for gold
4 heart pieces add up to a complete heart increase
remove heart pieces from chests
chests only contain gold, big key, or map


Interaction++



	
	

Room Goals
doors should be set to trap doors
once hero collides with them, they close
this traps hero inside room

once all enemies are defeated or switch has been flipped, trap doors become open doors
this 'completes' the room and allows hero to exit

this means that rooms should have a goal enum
{ None, DeadEnemies, Switch, Torches }





DungeonDesign - Taking it Further
	design dungeons as a whole
	dungeons should have a theme
	there should be 'architectural puzzles', where the dungeon changes in some way
	this could be raising/lowering water levels
	moving forward/backwards in time
	destroying parts of the dungeon/rooms
	using switches to alter the paths thru rooms, or alter the nature of rooms
	for example, turning conveyo belts on/off, or spike traps
	
	in addition to these architectural puzzles, dungeons should also have a key item
	this key item must be collected to complete the dungeon
	for example, the hammer knocks down posts
	the hookshot pulls hero across gaps
	
	there are certain zelda puzzle tropes to be followed to:
	block puzzle - move a block or series of blocks into place, to press a switch / chest / etc
	enemy puzzle - kill all enemies / miniboss / boss
	shooting puzzle - shoot an eye or some object with an arrow / boomerang / projectile
	torch puzzle - light 3-4 torches
	
	
	

Polish++




Create CheatsScreen - or this could be part of game ctrls

less instances on sfx list for text
more instnaces on sfx list for bomb explosions

"press any button to play again" should be "press any button to continue"

dungeon run text should blink, just like summary screen
should this be part of the animatedTitle's functions_class as well?
functions.Blink(Title), where title.blinkSpeed is used?







	
	




MOAR STUFFS TO DOs
	

options widget functionality	
	save game autosaves for now
	quit game exits all screens and loads title screen
	load game creates load screen
	
title widget functionality ++
	new game resets player data, autosaves, and creates overworld screen
	load game - calls the load game screen
	audio/input/video/game ctrls - does nothing for now

audio ctrls screen
	sfx volume
	music volume
	
input ctrls screen
	button mapping
	
video ctrls screen
	full screen or windowed?
	
game ctrls screen
	how camera moves - follow hero or center to current room? 
	we only need to flip Flags.CameraTracksHero boolean
	
	
Handling corrupt game files & first run setup - part 2

if a saved game file has correct XML headers, then game will load it
any fields that match to saveData's fields will then be loaded
theoretically, we could load an XML file that has no correct fields,
and the game would never know.. 
this makes it impossible to check if the loaded data is corrupt or accurate.
only XML with malformed opening header tags will fail to load.

we need a way to check that the loaded xml is actually a game file

create a saveData instance, set all it's fields to null
then load the saveFile into the null saveData
then check each field of the saveData to see if it's not null
if any field is null, then the loaded saveFile was corrupted
however, we can probably extract some data from the corrupt file 
so we could prompt the user with a dialog that asks 'load uncorrupted data?'
'the file i loaded is corrupt. should i try to recover it?'	
	
	

	
	
	
	
Polish

	implement the following items:
	item boomerang - just like LttP boomerang, hits an enemy for 1, can 'collect' pickups
	weapon staff - creates a magic orb projectile, if magic is max, else has an attack of 0, but pushes
	equipment pearl - wtf does this do in game?	
	
	we need an enemy that shoots arrows (new enemy type, not just blob with bow)
	we need an enemy that shoot fireballs (new enemy type, wizard?)	

	minor bug:
	the loadout animates the loadout menuItems
	when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
	this leads to a double scaling down effect, which shouldnt happen
	we shouldn't be able to select loadout menuItems.
	this solves the scaling issue, and it doesn't make sense to be able to select them
	selecting an item should only equip it

	polish hearts and magic world UI
	if the hearts change value, play the heart refill sound
	if the magic changes value, play the magic refill sound
	if hero uses magic, play the magic use sound
	
	Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.
	
	what if we pushed the hero a little bit in the opposite direction of the fireball being cast?
	this would make it seem like the 'weight' of the fireball pushed him back	
	
	instead of an unknown menuItem, we should have a 'purchased' menuItem for items that have been bought	
	
	REPLACE BOSS MUSIC	
	re-mix the boss music, making drums much less prominent in the mix
	also, mix the drums down to mono in session - we're getting phase issues when we convert to mono later

	puzzle: conveyor belt that pushes the hero away from something
	solution: hit the switch, turn the belts off, so hero can move around
	we could even put them on a timer and play a timer tick sound, suspending the music
	
	Stats MenuItems? Or Help Menu?
	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	we could add a spear projectile for blob enemies

Stuff that needs to be done, but it's not terribly important rn	
	
	we need a fairy projectile
	this projectile randomly moves around, slowly
	if the fairy collides with hero, it restores his health and magic
	later on, if the hero is attacking with a net, and the net hits the fairy
	we'll put the fairy in a bottle, if the fairy bottle is empty

	pickup and throw
	hero should be able to pickup the skull pot objects
	hero should be able to carry the skull pot objects around
	hero should be able to throw the pots in a direction
	pots should travel for a bit, with a shadow, before colliding with ground
	pots should also collide with room objects
	pot should have sound for pickup, throw, explode/death
	pots should randomly spawn loot too, when they are picked up
	
	dragging/pushing/pulling
	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, and check collisions with all objs & actors
	if a draggable object would collide, it doesn't move
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.
	
	implement additional weapons / items
	weapons : { staff, axe }
	items : { lightning, boomerang }
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, i dunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


	
Look at how stardew valley engages players
	theres so much to do and explore
	we need more to do and explore
	should be able to have a pet, like a dog
	should be able to speak with more people/npcs
	should be able to manage traders, adventurers, etc.. like assassins creed blackflag minigame
	should be able to craft advanced items, using special parts + gold
	just a ton of additional stuff layered on top of the dungeon running, that is supporting core gameplay
	
damascus appararel / 5060.bigcartel
- we could turn the style of the game into shirts + apparel too
- but the style would have to be futuristic and awesome	
	
	
	
