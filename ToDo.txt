
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	





Roadmap

0.77 - Overworld added, temp levels setup, COLOR.
0.78 - ShadowKing coliseum, town, blocked shadow dungeon entrance
0.79 - Forest Islands
0.80 - Lava Islands
0.81 - Cloud Islands
0.82 - Swamp Islands
0.83 - Death Mountain Islands
0.84 - Thieve's Hideout
0.85 - Shadow Dungeon, Shadow King fight


0.86 - port to Switch
0.87 - sidequests + hidden Ganon story
0.88 - hidden blob story, etc..
0.89 - ???


Video To Make -
playthrough videos
development videos
intro to codebase / systems design
overall design & direction of TSK
thoughts on zelda franchise
seperating collisions + interactions





















Today:




Overworld++

implemented left path thieves den, connecting 
skullisland to thieves den bottom path.











locations++


1786.766 <- hole in the sea level pos, is part of right path


thieves den exterior right path (loops dth mtn and btm path)






more locations

* fishermans path (forest)
* lava to cloud loop
* plateau island main path




//teleport camera to hero upon overworld screen OPNE()











fix bkg color to match clouds
*this involves modifying color scheme in assets
we'll need a separate color for overworld bkg.
then a color for level bkg, dungeon bkg.
should be easy.












Editor & Textures

we will need to touch the editor next.
which means we can consolidate sheets now.

we should display as many objects on screen as possible,
using a few widgets. we should cycle thru widgets, and
consolidate them when possible.


one texture for the majority of shared objects, like water and
busehs and trees and effects and stuff. but each dungeon
still gets it's own texture sheet, so we can pallette swap.


we push for color: consolidate all objects
to one sheet that are used consistently.
these get one color pallette.



















New Levels

there are a few base levels we need to make first, that are
essentially ready to go:
port town: all the vendors / npcs + farmer.
mountain dungeon entrance + dungeon.
forest dungeon entrance + dungeon.
swamp dungeon entrance + dungeon.
shadow coliseum: as is coliseum for now.

these levels should use objects with full color,
including the dungeons, enemies, and bosses.





UI Color

transition the UI into the current color pallette.
we will not make this color pallette modifyiable - hardcode it.
but it needs to look good.





Title Screen

replace text with "The Shadow King" in big text. no allusion to
LOZ or Nintendo yet.



Release 0.77. Overworld and Color implemented.















Overworld ++

locations should have a camera offset. so, when link lands on
a boss location, the camera centers on the skull, instead of link.
we can also do this with special locations, such as the cloud castle:
the camera should focus on the castles, panning the right.
this shifts the focus off of link and onto a specific obj in overworld,
drawing players attention to it - saying 'hey this is important'.

locations should be named on the map - this will help knowing each
location and how they are connected, and will aid in development.
however, this should be a static ui element overlay, that changes when
links lands on a location. thus, locations need string names to query.

a dungeon is composed of rooms, a field is a large room. we can
chain fields together using objects, similar to how we make dungeons.
this allows for a series of fields leading up to a dungeon or target.r

locations are connected to each other via a line (ref theorem code).
this allows the player to visually see where they can go, while also
allowing for easy debugging, since the lines show the neighbors.
if these lines are calculated each frame, and only for the current locations
on screen, then the locations can move around and be animated while
still properly being connected. link should track to his landed location
each frame as well, in case it moves around. we can even have location connect
dynamically, if they are close enough together. this would create a window
of opportunity for the player to move to this isloted location, which could
be useful or interesting in some way later.






























initial level : at sea, boat is attacked, link uses his sword
to defend brandy from attackers. the ship cannot be left (stairs up).
once the attack is over, brandy converts to mission complete obj.
talking with brandy then ends the intro level and takes us to skull
island overworld location.

skull island - final boss, coliseum, vendors

link talks to the shadow king, who confirms that he holds brandys
love in his prison of death. the shadow king agrees to release 
brandys love if link brings the shadow king the 4 mythical beasts,
and defeats them in his coliseum for tsk's entertainment.
this sets the stage for 4 dungeons, then 4 boss battles.

undead island? we have graveyard enemies.
we could put these on skull island as special coliseum
fighters? secret skull island dungeon?

anyway, link defeats the 4 dungeons, beats the 4 bosses,
then confronts tsk, and demands brandys love be set free.
tsk laughs and then they battle. after battle, tsk tells
brandy the only way for her to see her love again is to
pass on to the other side, which she agrees to do.
link says goodbye, brandy becomes a ghost.
the final image is the boat sailing away with caption
'link continues on his quest..'

brandy's silver locket contained a map of these islands,
which brought brandy there. she knows her lost love is
somewhere on one of these islands.





we should change how dungeons / bosses work.
unlocking the boss door should exit the dungeon,
placing link at the boss location. each boss battle
should take place in a field, where the player has
the option to exit anytime they want, plus they have
more space to fight this larger / harder enemy in.

this means players kind of 'save progress' once they
beat the dungeon, and dont have to suffer through it
again if they dont want to. also, they can fight that
specific boss anytime they want, in a level designed for
that boss battle.

when the player "beats" the dungeon, part of the skull
should collapse, revealing the boss location, which is
now linked to the entrance location.






notes
*all game objs ref the main 1k sheet.
themed objs ref their specific sheet,
set in Obj.SetType().







post-release notes:

only spawn 1 floating eye in forest dungeon rooms.

if a room with a switch in it has been solved, (visited)
then remove the floor switch obj post room build.

if player has the map, dont spawn the miniboss.

fix those really hard column and row rooms.
make more versions of really easy row and column rooms.
we need more room data overall.











Actor Refs

a projectile's caster should be an actor reference.
if a projectile's caster is null, then it should have no behavior.
this is because some gameobjects cast projectiles,
but in that case the projectile wouldn't have any behavior
related to the caster.

this simplifies the current system for handling projectiles,
which uses the moveComponent. using this moveComp, projectile.update
attempts to prevent projectiles from ovrelapping with their casters,
but this is based on the compMove and not the hitBox, which is
actually the target of importance. we need to have access to
the entire actor object, not just it's compMove! we need to
touch the actor's hitBox from projectile.update, and we can't currently.
once we do this, we can check and align projectiles to the actor's
hitBox, and then larger enemies can have larger hitboxes while also
being able to cast projectiles...
plus, projectiles could properly implement their behaviors - by
tracking the actor's hitbox instead of their newPosition..

Improve Projectile.Spawn()

*miniboss cant shoot fireballs south - why?
?= pro.spawn() assumes that the actor's collRec is 16x16 - it shouldn't.
this means only 16x16 actors can safely shoot fireballs without damaging
themselves, which is some valve level stupid. this method should take
the actor as a parameter, and then we should base the offsets FOR ALL
PROJECTILES off of the actor's collision rec width and height. this
would allow larger actors, like bosses, to SHOOT FIREBALLS. geez.

Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye: spawns A TON of exploding seekers while in his special.




