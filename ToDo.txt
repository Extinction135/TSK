
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


VisualStudio Shortcuts
F12 + selected word = goto definition
CTRL + M, +O = opens, closes regions


The Big 4:
"Give the player meaningful choices to make."
"Remind the player of their choices."
"Recognize and respond to what the player does."
"The Gameworld is a character that reacts to the player."


- Milestones -

Forest Islands complete
Death Mtn Islands complete
Lava Islands complete

Cloud Islands complete
Swamp Islands complete
Thieves Hideout complete

Shadow Dungeon, TSK Fight complete




0.77 playthru: https://youtu.be/_b7qclGTffE
0.78 goals:
	more items (axe, hookshot, hammer, magic mirror)
	more interaction (throwing objs, actors/objs in water, decorations)
	better dungeon traversal (X solved puzzles, marked map)
	better coliseum - uniq objs + enemies
	better overworld - more skulls, waves, cluds, vfx @skullIsland
	X smaller ram - dungeon sheets get smaller
	X fix projectile spawn system + enlarge boss hitboxes
	implement bed + dream sequences - special leveldata + set hero's type + dialog prompt
	(exiting dream field ends the dream)
	(we may split bed into two objects again, to make this interaction more expected)
	X setup roomObjs, projectiles, particles, pickups systems for future growth






Today:








EditorMenu++

while in editor menu, f1 button should iterate forward thru
widget sets, just like the button press does. this allows us
to move through the widgets faster, while keeping the cursor
over where we know the object will be, instead of clicking and
moving back and forth - this is very slow. faster workflow, 
faster iterations, better code, better game. done.

also, editor menu screen was upgraded to allow for dungeon
textures to be displayed, based on the widget display set.
so, now we can see what a specific dungeon's unique objs
look like in the editor, and in game (if we're in room editor).













bugs:
bite pros dont hurt hero?




take out the trash, it stinks man!














the drawHeldObj() method is very inefficient.
the design of how we pickup & carry objects, is very inefficient.






Throwing Held Objects

**we need to remarry the throwing routines to the new projectile
system. the picked up obj becomes a carried projectile, that inherits
the object's texture and animFrame. this 'dupes' the obj overhead, which
then tracks like any other projectile. when thrown, this projectile simply
travels in a straight line in hero's direction, from hero's center pos.
this makes throwing reliable again, and much easier in code.

















Blood Spatter Analysis, Dex

upgrade throwing() enemies to explode as blood spatter,
and leave a blood mark on the ground as a roomObj.
















bugs:

destroying a burned post with hammer caused a fire?
destroying non-burned post with hammer caused a fire too.


Destruction++
functions_interaction has handleCommon and blowuP() methods,
which need to be consolidated into one, using a power level byte
which is part of projectile. this isn't part of pro yet tho!
we can also model if a projectile is 'on fire' using a onFire boolean.
then, we can light the proper objects on fire, if we need to.
this seperatees the destruction of objs, from the burning of objs.












Fairy++
do fairies work? no. they are not modeled as pickups.
make fairy a pickup that lasts forever,
modeled like other pickups.










Fire and Ice Rods

fireballs shoot from firerod.
iceballs shoot from icerod.

generic ice block for all 16x16 enemies, larger enemies
just take damage and get pushed.

ice explosion also creates icetiles underneath it.
icetiles cannot overlap other icetiles, and other
roomobjects, like mountain walls, etc...





POSTS

we need to add posts to the game, so hammers can smack them
down. also, these posts should be indestructible to everything
but hammers, including explosions.

















fire boomerang


comet magic

bombos should make non-hero actors explode via explosions
simultaneously, along with bomb circle around link.

quake shakes the screen and deals level 2 damage to everything
in the level. so it's very powerful. BUT flying objects and actors
are completely immune to it. this also means we need to write a
camera shake routine like we did in th.



we need a blank generic magic medallion to model random enemy
magic, so we dont waste alot of space in the main sheet on these.
easy - and then we can have a specific slot in the UI for enemy
magic under misc.






Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye phase 3: 
spawns A TON of exploding seekers while in his special,
while moving to the center of the room and smoking profusely 
and taunting every frame.












Tentacle Magic / Tentacle Walls

the kraken summons tentacle actors upon being hit. this
is not tentacle magic. instead, tentacle magic spawns a
tentacle roomObj, which will attack any actor within it's
attack radius, which is about 16 pixels.

*this means we can create tentacle walls in rooms, also
as part of puzzles - and make it specific to the swamp
dungeon if we want to.
*this means we can also create a tentacle magic medallion,
which allows hero to create one of these roomobjs in the
current room, in the facing direction. this allows for
the creation of walls of angry tentacles. plus, we can
put these tentacles in the water and they won't move
around. 
*tentacles should be destructible with explosions, but
not destructible with level1 type damage.

level 1 is 1 tentacle
level 2 is 5 tentacles
level 3 creates a wall 10 tiles long
level 4 creates a box around link








Dream Sequences

'i dreamed i was a tentacle, lost at sea...'
hero type = tentacle, empty sea level, with decorations.
dying or exiting level ends the dream. super easy.

'i dreamed i was part of a spider hockey league...'
spider, level is ice tiles, with bumpers, and 'puck'.
this obj inherits hit direction, but doesn't take
damage at all, so it never gets destroyed. spiders
have bite items which will hit the puck.

starting one of these dreams is an interaction with
a bed, popping a dialog asking if they want to sleep
in this bed. A button starts the dream sequence by exiting
the level to a dream setup screen, where text displays
slowly on screen, centered, against complete black.

once the text finishes, we wait for any button input.
then we fade in the level like normal.









Default Dungeon
the default dungeon sheet is the one we use for all
overworld / field level dungeon objects. this means
this 'dungeon' has a green grassy floor.

visual bugs: 
bottom spike lip of pit competes with middle pit black obj.
also, the pit teeth default to brown, which is part of the default
sheet. this default sheet should be thought of as the 'world' 
dungeon sheet - these pits will appear on the overworld against the
expected green bkg color. so the default pit teeth need to be green,
leading into brown as they go down into the ground. 


Coliseum++
we need 'windows' that look into the coliseum,
like the overworld sprite depicts. plus, I don't like
how the coliseum level is unbalanced and to the right.
instead, the coliseum - and all subsequent coliseums -
will be entrance centered to level, north of spawn.
this 'presents' the level much better, because coliseums
have no required puzzle for entry.

a window is a 3x4 obj, with baked in bkg.
so this saves us a lot of roomObjs.


Coliseum++++
we also need to have the large skulls be a 2nd object
that can sit on the ground, indestructible. this way
we can decorate the shadow coliseum appropriately.
we should add this skull detail to the overworld map as
well.





Roofs++
remove rear roofs from the overlap check - now hero
can't peek into houses by walking behind them - he has
to be underneath the main part or the chimney.





Grass++

cut grass should grow into tall grass if near coastlines,
or filled ditches. 





Water++

*we could have animated floating lily pads, much like the animated
flowers that sit over the grass levels. this would add some decoration
to the otherwise bland sea water.

*need to make boat anchor object - this is already in common objs,
and can be used to further decorate piers.





Magic Mirror
use it in a dungeon to return to the exit (starting room). 
exiting dungeon takes us to field.
it can only be used in dungeons, and it's partially broken.
it's use in the shadow dungeon is different, as it transfers
link from the darkworld to the lightworld version, and does
not take link back to the starting (exit) room.

the history of why the magic mirror is broken can be explained.

- plays warp sound fx
should call Level.BuildLevel(Level.ID),
which will cause the level to fade in from black,
and place hero at the entrance the dungeon again.
*this should only work in a dungeon. 






Overworld++
we need more skulls around the shadowking's island and sea. keep
the shadow skull area sparse, cause it's going to be animated,
and it will never 'collapse'




Exploit : Trap Door Pit Teleport

the fix is simply to remove trap doors from the
routine that sets the last 'touched' door / active door.
in fact, only open doors should be set as the last / active door.
the other exploit is to touch a trap door or closed door to
set your respawn point, which is not what i want.


Implement Cane of Somara (or whatever)
this is the cane that creates blocks that are pushable.
this makes it MUCH easier to get thru dungeons, as many
rooms rely on floor switches, which link can simply
create a block over. if a block is created ontop of
a blocking roomObject, the block ...





Room keys - these only work for the room and only unlock 1 door, and
these rooms turn all their doors into locked doors upon close, similar to puzzled rooms
link doesn't put them into inventory - he literally picks them up and walks over
to a locked door and collides with it. link should also be able to throw keys into
locked doors, which means we need to throw objects directly in line from link,
which simplifies how objs are thrown ALOT, and makes their throws more predictable.

this is kinda like super mario world style key gameplay.
if obj.type == key & obj.hitBox.intersects lockedDoor.hitBox,
convert lockedDoor to openDoor, release() key.
- or - we put the key as a menuItem in inventory,
and clear that inventory item when link enters a new room (pre-build).

Keys!!!
**we could have 'keys' in the game, which would be temporary for the room only
the doors would shut and convert to locked versions, or only some of them would.
inside the room is a chest that contains a key. hero picks up the key, unlocks 
a door, key is used, continues on. the room resets, works the same later on.
the key would be displayed in the inventory screen as a brittle rusty key.
and when it's used, the key breaks. the flavor text says that the key will
likely break after one use.

we could lock one door randomly, or we could lock ALL THE DOORS, and then 
force the player to choose which door they want to unlock.









Speed++
slow finish / build becuase we call cleanRoom() twice, which is dumb af
in dungeon / room routines.

