GIF 32 Dithered, Quality: NearestNeighbor @ 50% size

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

goal: 13 commits/day

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()
	
adding soundFX
	added ___Src and ___Ins soundFX to Assets.cs.
	added "_____" sound effect to project.
	updated Assets.Load() to load Sound into ____Src + ____Ins.
	call Assets.____Ins.Play() from somewhere in the codebase

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	86mb on Win10.  94mb on XboxOne.
	
	
	
todo:


13




created GameObjFunctions.ConvertDiagonalDirections().
this moves functionality out of ProjectileFunctions.AlignProjectile().
created ProjectileFunctions.AlignParticle(), moving particle alignment out of AlignProjectile().
this makes it a bit clearer what each function is doing.
cleaned up GameObjectFunctions, migrated particle rotation routines into SpawnParticle().





we could move the projectile functions into game object functions, since they are more fitting there



we need to spawn the smoke puffs when hero opens boss door



there is messy-ness with particles + projectiles
they overlap in their nature, and should be more seperated

minor issue with how we are aligning projectiles and particles
we're stuffing particles into the align projectiles function, which betrays it's purpose
we should be aligning particles seperately from projectiles

if we split into seperate classes, there will be redundant code
keep it in one class, seperate functions out




it would be nice to have a global flag to disable mobs
this would make it easier to test certain things, without having to constantly fight with mobs



get the total ram use on xbox one.	





 


create a boss sprite sheet (should be double the size of a normal actor sheet)
should have the same layout as actor sheet
use the floating eye sprite

spawn the boss in the boss room, centered to it
update the win/lose functions to only win if the boss actor is defeated
this will probably be a boolean in the dungeon struct, just like bigKey boolean
play a sound when hero enters boss room
play a sound when boss dies





Version 0.2 Milestones

	build a second room, randomly place it around the spawn room
	this second room is a boss room
	connect the two rooms using a boss door - this door is locked
	one of the enemies in the spawn room should drop the boss key
	
	in the second room, place a boss actor, with some mobs
	create a boss actor (this is just x2 spriteSheet with same actor anim layout)
	actor is processed just like other actors
	boss should be able to 'spawn' mobs (pull from actor pool)
	when hero enters boss room, door should shut behind him
	musical cue should play that hero is in boss fight now
	
	when a blob is destroyed, it should drop a heart consumable sometimes
	we'll need a gameobject of type consumable
	and hero will need to check collisions with it
	
	summary screen should play the text counting sound while tallying up the numbers
	once the numbers are tallied, summary screen should play the text complete sound
	get the totalTime value counting up to the dungeonRecord's totalTime value.
	we can get the indivdual hours, minutes, seconds
	so we can create ints that represent those in summary screen
	then count those ints up to the values of hours, minutes, seconds
	and concat them all onto the same summary data string
	
	we need a particle/hit effect for when an actor is hit
	this should apply to blobs, hero, and boss
	
	
	
	
	
	
	
	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	
	make sure that the dungeon complete musical cue is mono and 22k

	hero should spin around prior to dying
	other actors should not do this, they should die immediately
	the dungeon screen should only start it's fadeIn if the hero is in his final sitting death state
	it should remain 'playing' while hero spins around

	for the boss fight, we'll just use a musical cue to tell the player they're about to fight the boss
	we don't need to switch music tracks, tho we would like to
	if we can compress the audio enough, we might have room for this track - it would be nice

	whats the reward formula?
	time bonus + enemies killed - damage taken
	time bonus is based on how many rooms are in the dungeon.
	total dungeon rooms - total minutes = gold multiplier * 100.
	this expects the player to clear a room a minute.

	implement a fireball projectile that moves across frames
	rotate the fireball sprite to face down (all projectiles + weapons should face down by default)
	this is spawned from the Y button press
	visually display fire magic medallion for current item in worldUI
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	create overworld screen, with selectable dungeon / shop locations
	these lead to DungeonScreen or ShopScreen
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Maybes / Ideas	
	
blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
or they can use a weapon, like a stick or gooey hand, iunno

debugInfo displays the floor index, instead of the # of floor tiles used currently
which isn't really a problem, cause we're going to optimize how floors are drawn later on

OPTIMIZATION
if we don't draw the floor tiles, the draw loop is much faster
so, we could standardize the room sizes, then create a floor sprite
then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type



OPTIMIZATIONS
	drop the sample rate down to 32k to save even more space on bkg music files
	the soundfx are already at 32k, so we know lower sampled audio builds and loads correctly


