"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps
adding music:
	files are saved as .ogg and added to content pipeline, built on high quality.
	keep these files stereo, but at 22k.
adding sound effects:
	sound effects should be compressed down to 22K sample rate, mono, 16bit
VS shortcuts
	CTRL + M, O = collapse functions/regions	
new gif: 50% nearest neighbor, 32 dithered
adding a cheat:
	add value to MenuItemType enum (cheat starts as a selectable menu item)
	update MenuItem.SetType() to set cheat menuItem descriptions, titles, and initial frame.
	add menuItem to Cheat Screen.
	link neighbors, add effect, add check to SetCheatMenuItems(), playtest.
Adding GameObjs:
	make enum defs, make animFrames,
	set objType paths, add to env obj widget
	playtest in field.	
	
	
Phase 1 - version 0.1 to 0.7 (complete)
zelda with a procedural, randomly generated dungeon, and
better movement / dashing / combat on xbox one + pc.

Phase 2 - version 0.8 to 1.0
+ Miyamoto's original lttp ideas.
+ all desired functionality from lttp + other zeldas.
+ all desired functionality from other games.
+ mature, dark story + endgame content.	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
v0.8 goals

- the "shadow system"
every actor has a shadow, based on the actor size and flying state.
larger actor = large shadow, flying actor = smaller shadow (due to height off ground)
every object has a shadow, based on the obj type, size, and state.
these shadows maybe visible or not. these shadows should track to the
objects/actors each frame, AFTER the compMove component has finished processing.
these shadows are sprites that are added to actors and gameobj classes.
this will likely be part of pool, possibly just prior to drawing to ensure
they are always aligned to their obj/actor (altho this does pollute Draw)..

- houses, includes buildings, beds, interior objs

- Non-room repeating Dungeon, additional rooms
- Flying Dungeon Enemy, Minor Overworld Enemies
- Blob AI improvements - sword, arrow, bomb based on weapon / item loadout 
- blob loadouts could be randomized when room is built()

- EndlessForest Demo (shows off gameplay, complete on it's own, camera tracks to hero).
- this is randomly placed bushes / trees / grass + ANY enemy type
- room rec tracks to hero, expanded room rec cleans up anything that doesn't touch it
- as room moves, *generate random stuff just OUTSIDE of room rec*
- this means, as hero moves he is always 'finding' new stuff, even if he doubles back
- npc outside endless forest dialog = "once you go in, there's no way out..."
- later on implement magic mirror, which returns hero to overworld screen

- LIGHT WORLD & DARK WORLD
- implement enumFields for building rooms (big optimization)

- create 'boat' level, with boat captain, who has dialog with link
- offers to take link to a variety of locations, using vendor screen
- only available location is water temple, for low gold price (since link 'hires' crew)
- this level is the boat obj + a dungeon entrance obj + a bunch of water tiles (maybe a small island)
- links path is to/from the boat to the dungeon entrance

- water temple / swamp dungeon: 
	build crit path to hub, crit path to key, crit path to boss, 
	*crit path to water switch (pullable lever)
	*place water switch randomly in room/hub room
	water pullable lever flips high/low water level boolean
	when rooms are built they build high or low water levels, 
	low water levels prevent hero from passing thru rooms 
	there are low water levels in rooms along the key or boss crit path.
	hero must flip switch to access key or boss rooms, or not.
	boss is tentacles squid
	
- mountain dungeon (diff enemies, boss, dungeon sprites - but same rooms)

- room keys - these only work for the room and only unlock 1 door, and
these rooms turn all their doors into locked doors upon close, similar to puzzled rooms
link doesn't put them into inventory, he literally picks them up and takes
them to the door to unlock it. this is super mario style key gameplay.
if link's heldObj == small key, then link's interaction with locked door makes it open.
and heldObj is released().











Friday
	- record playthrus and examples of gameplay, post. 
	- release v0.72.
	- update readme.

	- create archive releases for v0.1 - v0.7. (fork, revert, release, delete.)
	- later, we can compare gameplay across versions.
	- note this is only for Dx version. UWP version tracking should start with v0.7.
	- these version archives should remain local, outside of repo folder.
	- *we should be able to record via the a20s just fine, via obs.
	
	

	
	
	
	
	
	
	



TODAY:





Shovel MenuItem + Data

created shovel sprite, to match the diagonal orientation
of the other items and weapons used in the game. my theory
on why the shovel was vertical and not diagonal in LttP
is likely because it was a transitory item, meant to be
used for a short period of time, replaced by the flute,
after link digs in the top left area in the circle of trees.
so, either the visual designers were cue-ing the player
that this item is different (disposabe), or they were
just being lazy or re-using an old sprite. 

added MenuItemType WeaponShovel.
added animFrame and menuItem.type() def.

added saveData.weaponShovel boolean.
updated unlock all cheat to unlock shovel.

updated inventory widget to display shovel, next to net.
updated ui item sprite sheet.
playtested, shovel menuItem is in game and looking good.








Shovel Weapon



**fix how we store and track the hero's current weapon in savedata.
somewhere we load this, probably in fun_hero. and thats where we
need to convert weapons, armor, and equipment to using the system
that items uses, because it scales much better and doesn't abstract
the item to an int value, but rather an enum string representation,
so that's nice.







need shovel projectile (tracks to actor, acting like sword)
shovel projectile can deal damage to objs & actors just like sword.

Dig(Actor Actor) method: place a trench obj aligned to 16x16 px grid in room.
the trench obj's position is based on the actor's pos and facing direction.
we apply a slight offset to the center of the sprite pos to get a good dig pos,
then align that to a 16x16 grid, so all trenches will line up.

certain objects reject the Dig method tho, objects that we don't want
the hero to be able to destroy, like walls.





destroying a coastline is the first step to creating a water channel.






then do an interaction check between shovel pro and







Miyamoto Wishes Part 2
	- implement shovel weapon
	- create ditch sprite, ground can become ditch (any objs are removed, like grass)
	- shovel interaction with non-blocking obj removes obj and creates ditch obj.
	- ditch objs have 16x16 collrec, and look like 'deep dirt', a layer under ground.
	- the same way fire spreads (using interactive frame), we can spread water tiles
	- water tiles expand for one frame and make ditch tiles water tiles if they touch
	- then we need to implement cascading effect: low, med, high water tiles.
	- high > med > low > ditch is the spreading routine.
	- at this point link should be able to construct water channels
	
TRENCH SYSTEM (OMG I DID IT)

how to make trench system work:
the initial trench obj placed is a temp obj with a 20x20 collision rec.
on it's first frame, it checks to see what trench objs overlap it.
using the list of overlapping trenches nearby, sort to a NSEW boolean list.
(this is done by comparing new trench sprite pos to neighbor sprite pos.)
then we can switch the type of the trench just placed to 'fit' into
it's neighboring trenches. N+S = vertical. E+W = horizontal.
N+(E/W) etc = corner trench. N+S+E+W = quad trench. we only need 3 trench sprites. lol.
this makes it easy to propagate water thru them too, as we would then
have low, med, filled sprite versions of the trench.

we will also need 'end caps' that connect to straight pieces.
and trenches that are just single holes in the ground.


* add windmill obj that animates if a filled trench obj touches it
in the right neighboring tile.


**** playtest as much as you can thursday ****














Boss & Miniboss

*we have big eye boss, with hit state and idle blink,
so we *could* make him the boss of the dungeon, and move big blob
into the hub as a miniBoss, which would be awesome.

the eye boss should spawn throw bombs towards hero with great force.
while also defensively moving away from hero. also, boss should be
invincible to bombs, because that's his main weapon, and we wouldn't 
want him killing himself. he should also have alot of health.









