"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps
adding music:
	files are saved as .ogg and added to content pipeline, built on high quality.
adding sound effects:
	sound effects should be compressed down to 22K sample rate, mono, 16bit
CTRL + M, O = collapse functions/regions	
new gif: 50% nearest neighbor, 32 dithered



v0.7 goals
- divide spritesheets up so they can be expanded / modified easily
- get all objects integrated into the new system / layout

- expand RoomBuilder to include the creation, placement, loading and saving of world levels.
- Dungeon Entrance Level, with dungeon entrance object, locked cam, filled screen
- Outside Town Level, locked cam, filled screen, vendors

- fix picking up, carrying, throwing, dropping, dragging, pushing objects
- can drag: light blocks, dungeon statues, barrels, torches on/off, chests
- can pickup, carry, throw: pots
- remove dropping pots from game, hero can only throw them

- Non-room repeating Dungeon, additional rooms
- Flying Enemy
- Blob AI improvements - sword, arrow, bomb based on weapon / item loadout 
blob loadouts could be randomized when room is built()







TODAY:






Redefine Objects Widget

created WidgetObject.cs file, which will contain all the classes
related to the new object widgets that are being developed.
once they're designed and integrated, i'll split this file apart
or maybe not depending on what the design calls for. if you
haven't noticed by now, IDGAF about subscribing blindly to paradigms.
this is just the fastest way to dev the data and systems right now.

created WidgetObjects_Dungeon, and populated it with testing objs.
created Functions_Widget, with a method for positioning all gameObjs
for any passed ObjWidget. tested, working as expected.

setup the new Dungeon Objects Widget, got it animating and drawing
in Room Editor, the first step towards matching the code to the 
mockups and intended functionality.






push 1

create base obj widget class, with 16x16 gameobjects
this is 4 per row, 12 rows total, with a base draw method
that checks to see if the gameObj is null

to make a larger obj, just set obj in the list it covers to null
then we add null checks later and skip if null
this allows a 2:1, or a dungeon entrance in the base obj widget class

create dungeon objs widget, which inherits from base obj widget
this simply sets the CONTENTS (& POSITIONS of menu objs) of the widget, 
there are no other methods other than the constructor for this class.
(because we'll have 4 additional inherited subclasses like this one soon).

modify object tools widget to match current mockup and functionality.
modify data tools widget to match current mockup and functionality.









pit teeth are not displaying properly in dungeon objects, but thats fine for now..









Implement 'F6 - Hide All'

add the F6 button to top menu, modify all widgets to draw/input/update
based on a hide boolean. link this f6 button to the hide booleans.

implement F6 button 'hide all' which would stop input, update, and drawing of
all widgets on an editor screen, including the top menu.. powerful. this single
function will allow an editor the ability to view the level or room as the
player would - EXACTLY - allowing editors the ability to fill levels to the
edge of the camera with objects, so a level looks visually different from a
dungeon in the sense that the surrounding darkness is never seen outside on
a world level. it's there, but we are just going to cover it up with game objs.

test hiding of level/room widgets










push 2

get something relevant displayed for level editor,

shared objs widget
environment objs widget















editor ++ - these are the widgets that are on the RIGHT!

level - building objs widget
dungeon - enemy tools widget













Design Editors (Room and Level)

Room is different than Level in the sense that Levels are larger and more visually
impressive, whereas rooms are built around puzzles and enemies. Both have secrets
to be found, and both have lots of interactable objects.

However, level objects are ALL placed by hand, so we need to be able to select
all level objects that exist for that level type. by comparison, not all dungeon 
objects are set by hand, some are set procedurally and are never selectable or
even moveable - the dungeon exit objects, for example. so in the level editor,
we'll LOTS of room for large objects, like the dungeon entrance. the room editor
can be pretty lean, because it will only deal with Dungeon Objects.

so Rooms = Dungeon Rooms, Levels = World Levels.




















Implement Level Editor and Level Save System

we need to be able to save level objects to a level file.
this is larger and different than the room save data files.













TMRW:

Design the Cheats Menu

this requires an on/off game widget object that the user can interact with
via the A button press, should have a sfx and an animation, so it should
be a sprite, with a sprite frame sequence.

cheats we NEED RIGHT NOW for testing purposes:
infinite gold
map cheat
invincibility

nice:
infinite magic
infinite arrows
infinite bombs

this Cheats Menu should be accesible from the Inventory screen, from the Options widget.






we should hide ObjectTools widget unless SpaceBar is held down, then all 
widgets should draw / interact instantly on screen. this allows for fast
switching between designing rooms and selecting tools.



RoomBuilder ++

object tools should get expanded to handle LOTS of objects


Expand RoomBuilder to be able to create outside world levels.
these are cam-locked, so fill the screen up with game objs and animations.

the big differnces i see right now are:
hide the worldUI and objTools widget.
we need to be able to see the whole level at once.
so, it would be nice to be able to 'hide' the worldObjects widget
unless the spacebar is pressed, at which point it appears centered on screen
then i select the world obj i want, modify the tools as needed, then release spacebar
this returns me to editing the room / level.
this should be implemented in RoomBuilder for ObjectTools too.
a text note at the bottom should read "hold space for tools"
we should have a button to switch between Dungeon mode and World mode.
this changes the widget displayed when the user presses the spacebar




Design and Link up new World Levels:
Dungeon Entrance Level
Outside Town Level















the dialog screen's speaker sprite is completely wrong
and i kind of love it.. because when i loaded the game 
up a rock told me that it had successfully loaded my 
last autosaved game. you don't normally hear that from
a rock.








Wall Torches
if we seperate the wall torch off the wall bkg sprite, then we can reuse
it indoors in world rooms, or outside on buildings. but, we need to update
the door decoration algorithm to add torches, instead of replacing the wall
with a wall torch, which acts simply as a wall.




PETS++
re-implement PETS as GameObjects that track to hero.
they don't need the full actor collision checking / implementation

we don't actually need the pet to be an actor
we *could* model the pet as a roomObject, since it's
behavior is so simple. this would simplify actors 
to being either hero or mob or miniboss or boss.













Zen Potion
a potion that lets the hero use magic without cost a time period (255 frames)
unlimited magic use, spam it all for 255 frames, for 99 gold.



















Non-Repeating Rooms in Dungeon

we need to make rooms non-repeating in the dungeon.
it's cheap to come across the same room over and over again.

so when the dungeon is being built, we need a list of rooms (based on loaded room data)
then when we place a square room, we ID it, and strip that room off the roomsList
and if we run out of square rooms, then we just try columns, or rows.
this way the dungeon algorithm can never reach a point where there are no more rooms to use
which would be game breaking. also, we need ALOT of rooms to build from.


row rooms need to be redesigned to be MUCH better
we need more rows and column rooms, and their quality needs to be improved.












Picking Up Objects++
picking up a pot puts hero into a carry state, but leaves the roomObj drawing on the sreen, but nonblocking
hero doesn't display anything over his head
setting the obj down doesn't move the roomObj, but instead makes it blocking again.
we need to be altering ROOMOBJECTS only, we dont need to abstract it into a thrown / carrying obj
if hero collides with a door, simply destroy the carrying obj reference

all related to picking up/carrying/throwing/pushing/pulling
{

*currently the obj hero picks up doesn't appear over his head
the obj stays in it's picked up spot

	hero should be able to pickup and throw enemy corpses
	which means we need to abstract the carrying obj into something that could ref an obj or actor
	or we have both, one for objs and one for actors

	what if the obj the hero picks up simply assumes the target obj's texture and frame, etc..?
	this would work for actors as well, which sets the ground work for allowing the hero to pickup 
	blob corpses and use them in some interesting way... like dropping them on a switch!
	we already do this with pots essentially, but we need to abstract the carrying/throwing solution
	to be more generalized and handle roomObjs, actors, or whatever we throw at it in the future..

	Dragging/Pushing/Pulling

	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, 
	and check collisions with all roomObjs, entities, & actors (expensive)
	if a draggable object would collide, it doesn't move
	this would have to be done per axis too, so we could drag along walls

	in order to accomplish these two things, we will need to be able to compare a gameobj against the roomObjs
	this starts with a collision check, then an interaction upon an overlap
	we would call this from dragging / pushing / pulling, and conveyor belt checks
	
	when we throw an object, should we create an entity?
	and should this entity be a projectile with a caster?
	so the game would know who threw the object, if we had effects later
	for example, lifesteal or something else that targets the caster upon obj collision.
}




























Lttp Stuff we're missing:




Keys?
**we could have 'keys' in the game, which would be temporary for the room only
the doors would shut and convert to locked versions, or only some of them would.
inside the room is a chest that contains a key. hero picks up the key, unlocks 
a door, key is used, continues on. the room resets, works the same later on.
the key would be displayed in the inventory screen as a brittle rusty key.
and when it's used, the key breaks. the flavor text says that the key will
likely break after one use.



Pullable levers
these are built into the wall and open shut doors, just like a switch
these must be pulled for a bit tho, and there are decoy levers that will
spawn snakes or explode..


Special Sword Attack
should be able to charge up attack and spin just like Lttp.






LightWave Projectile (push wand projectile)

the flame throwers on the ground shouldn't shoot fireballs
they should shoot those light wave things, which dont deal damage to what they hit!
they actually only push what they hit, and they dont die upon a collision
they will continue to push whatever they collide with until they die from age
this means we need a new type of projectile, which is exciting

and we can use this wave as the projectile created from the wand!
we can call it the push wand, which would allow us to create a whole new type of puzzle
where we can use the push wand to move objects to solve rooms!!!













fix how kick sountrack volume is handled
the hero's health sets the volume of the kick soundtrack
this check should be happening in the level class, not anywhere
in the assets or music classes, because the kick volume is only
changed during the level screen's life. when the screen closes,
it should ensure the kick volume is 0. this prevents issues we've
had before where the kick volume was above 0 while player was on
different screen.














dungeons should have an enemy list for each tier
then upon room build, randomly choose an enemy type from the correct tier list

we need a flying enemy - like a BAT



Dungeons++
the exit rooms should be different for each dungeon type
but they should be the same for the dungeon type they represent
so the dungeon type feels consistent, but there is variety between dungeon types

dungeons should have names.
the dungeon name should be displayed on the map.
dungeon names could be randomly generated from a list.






Boss dialog + Boss phases
initially the boss should popup a dialog mocking player
after boss hits half health, another dialog should popup
this one talks about boss changing tactics
"you're better than i expected"
in the 2nd phase, the boss moves AWAY from the hero
so its harder for the hero to hit the boss
in first phase, the boss just randomly moves around






Implement Dynamic Shadows System

an object pool for shadows would be great
objects / actors could have a field for a shadow sprite reference
then we could store a shadow offset, which allows us to fake depth on the Z axis
if we keep the shadow in one place, while raising the obj/act, then we get depth off the ground
this also sets the stage for flying obj/actors, as they would have changing shadow positions.
this also means we need to 'unbake' the shadows from ALL objects and actors.





the LSN screen should display the link hero if hero is link
should also display the blob character if hero saved game as blob
can we save the game as the blob character? is that in the save game info?




BIG OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	




Make the AI system Behavior based, where a Behavior is an enumerator

actor.behaviors = new List<Behaviors> { Behavior.Aggressive, Behavior.Curious, Behavior.Destructive }
Behavior.Aggressive (actor will pursue hero without regard for safety)
Behavior.Attacks (actor will attack hero, if hero is close enough)
Behavior.Curious (actor will randomly explore the area around them)
Behavior.Destructive (actor will attack any destructible object it comes across)
Behavior.SpawnsMobs (actor can spawn other actors, based on actor.type)
Behavior.ThrowsPots (actor will pickup and throw object it comes across at hero)

an enumerator, and a list in the actor class.
then we modify the AI method to work based on behaviors.
if actor.behavior[i] == 
- aggressive, move actor towards hero, if hero is visible
- attacks, attack hero if hero is close enough
- curious, randomly move actor
- destructive, attack destructible objects nearby
- spawnsMobs, randomly spawn mobs based on the actor.type
- throwsPots, picks up nearby pots, carrys them, and throws them at hero if hero is visible






Projectiles++
WanderingFire 
this is just like spikeblock except the obj.direction is chosen randomly upon collision
the direction cannot be the current direction however, and can only be cardinal	
should be able to place wandering fire using tools widget




OBJECTS:

Destroyed Debris object
the dungeon statue should become the destroyed version upon destruction.
any object that can be destroyed should become this object.
this object should look like a pile of rocks. can be pushed.

Circling Stars
just like Lttp, the circling stars turns hero into an enemy actor type
except, it's not on a timer. hero becomes enemy actor type until Circling stars collides with hero again.
this is a check: if hero.type != hero, become enemy, else become hero.

BUG - PITS
if an actor overlaps two pits at the exact same time
they can be pulled into each pit, resulting in a cancelled out pull
leaving actor hovering over pits, which is bad
*which could easily be fixed by using a weaker pull on the left for all pits
*the actor would slowly be pulled into the right pit, 
*then quickly pulled once they dont collide with left pit any more




for the ice dungeon, procedurally add ice tiles to each room
if ice tile overlaps with a pit / bridge / floor spikes / cracked floor, remove it
this can be done in the cleanup of room
and we'll probably need to expand the max size of roomObjs



implement a level 2 magic spell
this would deal 1 damage to everything on screen
and play explosions randomly inside the room
should be named bombos, sold by magic dealer





WorldUI++
when the hero's health changes, the worldUI should animate hearts individually
if the hero gains 5 health, each heart should scale up, then animate down
once that heart's scale reaches 1.0, then the next heart can animate
this sequential scaling should happen anytime hero's health changes







need an on screen dungeon timer (for dungeon levels)
upper right corner, simply draws the DungeonRecord.timespan value
this should display down to the ms
this should only display if level is a dungeon
	
	
	
dungeons can have deep water (sinks) and shallow water (just has wading fx)
and we can build puzzles around this, because it's impossible to tell them apart
but we should be able to tell them apart, with some kind of shallow water lighter color difference
this is important to do now, because it affects the layout of the dungeon sheet

where do we display the kill ratio?
this is displayed in a stats widget somewhere that hasn't been designed yet
equation for determining skill rating in percentage.
this is: total enemies killed / damage taken
ex: 10/1 = 10.   245/73 = 3.35.


NPCs should change their dialog based on the hero.actorType
if hero, then NPCs act normal
if blob, then NPCs act disgusted, wont sell

we need to create a blob safe level, where blobs have their own vendors + guide
this allows the two storylines to co-exist and proress seperately





DungeonDesign - Taking it Further
design dungeons as a whole
dungeons should have a theme
there should be 'architectural puzzles', where the dungeon changes in some way
this could be raising/lowering water levels
moving forward/backwards in time
destroying parts of the dungeon/rooms
using switches to alter the paths thru rooms, or alter the nature of rooms












Overworld++
add tiny smoke particles coming out of some houses
add 'floating' animation to ship (should bob up and down)
this means it needs to be a sprite in the main sheet
make castlel ruins look more 'ruiny'




**if you sprinkle magic powder on a dead enemy, he comes back to life at 100% hp
but, he's still your enemy, so i don't know how useful it is practically...




v0.9 goals

complete story outline + plot

Letters / Notes 
we could also use the map scroll sprites as a display for letters
from the hero's wife or whatever
this could serve as a way to remind player of story too
player could read a scroll and get caught up on the main plot points
> wife leaves hero, hero'c cause/journey
> invitation to final tournament, with 4 boss head requirements
these scrolls could also popup when the hero gets them
displaying alot of dialog / story plot points


implement dialog system and event booleans to track events in game

Create CheatsScreen - or this could be part of game ctrls













Crypt - optional dungeon + level

there are 8 floors to the Crypt - upper floor, the burial crypts, dungeon x 6

the upper floor
a large room with NPCs that explain what the crypt is (keeps bodies of gladiators + records)

the burial crypts
a large room of gladiators who achieved glory in battle via some record
for each record you break, you get to open that hero's tomb and take what's inside
one of the tombs opens to reveal the crypt dungeon (opens when all 4 crystals are obtained)

the crypt dungeon
this is a vertical dungeon down, with each level containing harder and harder enemies
this is basically a diablo1 rip off, with 6 levels down
at level 6 hero fights the crypt boss
crypt boss is a massive bullet sponge, and spawns just tons of adds in a large hub sized room
there are also magic attacks going on, so the room is filled and very hectic to manage
there should be multiple phases to the crypt boss, a truly legendary fight.
beating the crypt boss unlocks a special tomb in the crypt for looting





Boat

takes hero to different islands
if hero is blob, then secret blob islands become available (like blob home island)




Training Center
this is a place where you can train your hero or his team of gladiators
can train against any enemy 1v1, including bosses that have been beaten
this happens from a menu selection
you can also spend gold to increase a gladiator's stats
which you can then bet money on later in the colliseum



Colliseum
should have different kinds of tournaments
some tournaments will be 'to the death', which always have higher payouts than normal
gladiators that lose a battle, die in the game











Idea for a Tool (much later) - Colorizer

loads in all the textures for the levels in the game
select a level to see an example of it in use in a window frame
also has a color picker that allows you to set the color pallete used for the level
this would map the tonal grayscale values used to a list
then map the user's input colors to a list
then display the user's input colors based on the grayscale colors, using comparison lists
should also allow the user to save all the files as a set, named a specific way, to a folder
this would allow user to have complete control over the grayscale to color transition for release.

crazy awesome idea for a color scheme picker:
a central slider selector, with additional unselectable sliders around it
as you move the central slider, the other sliders move with it in parallel
should have an offset value, which controls how far apart the sliders are from the central slider
this would either spread the color scheme across the spectrum, or limit it, dynamically
of course, the example room with the level's display colors should be updating each frame
should be able to save the level's color values, or the game's level's color values
this would allow for the keeping of the sprite sheets in grayscale
and allow for the color mapping to occur independently of sprite development.


Awesome Idea: a display color pallete, mapped from grayscale values.
this means that all levels would be saved in grayscale.
then when the level is loaded, the display values would be set based on level type
the level's grayscale display value would then be interpreted into color
simply based on a list of color values, which could easily be changed and shared.

-how would this work? we would need a texture instance for the current level.
upon level load, levelsheet would be copied (bit by bit, not by reference) into the texture instance.
then the colorizer algorithm would run with the grayscale as target and color list as input.
it would change each grayscale color into the color equivalent based on the color list.
the level would finish loading, then the display texture would be used for the roomObjects







	
PROPERTY IDEA
Complete a long and difficult side-quest to earn a property that generates income (gold).
the player needs only to collect the gold regularly to purchase anything they want, eventually.
	



MOAR STUFFS TO DOs
	

	
title widget functionality ++
	audio/input/video/game ctrls - creates appropriate screen

audio ctrls screen
	sfx volume
	music volume
	
input ctrls screen
	bvisual representation of button controls
	
video ctrls screen
	full screen or windowed?
	
game ctrls screen
	how camera moves - follow hero or center to current room? 
	we only need to flip Flags.CameraTracksHero boolean
	
	
	
	
	
Handling corrupt game files & first run setup - part 2

if a saved game file has correct XML headers, then game will load it
any fields that match to saveData's fields will then be loaded
theoretically, we could load an XML file that has no correct fields,
and the game would never know.. 
this makes it impossible to check if the loaded data is corrupt or accurate.
only XML with malformed opening header tags will fail to load.

we need a way to check that the loaded xml is actually a game file

create a saveData instance, set all it's fields to null
then load the saveFile into the null saveData
then check each field of the saveData to see if it's not null
if any field is null, then the loaded saveFile was corrupted
however, we can probably extract some data from the corrupt file 
so we could prompt the user with a dialog that asks 'load uncorrupted data?'
'the file i loaded is corrupt. should i try to recover it?'	
	
	

	
	
	
	
we could add a spear projectile for blob enemies

we should include a soundFXinstance on actors that points to one of the soundFX in assets
then we can set this instance in ActorFunctions.SetType()
then later just call it generically, like Actor.AttackSound.Play().
same with hit sound, death sound, use sound.

implement additional weapons / items
weapons : { staff, axe }
items : { lightning, boomerang }

	
Look at how stardew valley engages players
	theres so much to do and explore
	we need more to do and explore
	should be able to have a pet, like a dog
	should be able to speak with more people/npcs
	should be able to manage traders, adventurers, etc.. like assassins creed blackflag minigame
	should be able to craft advanced items, using special parts + gold
	just a ton of additional stuff layered on top of the dungeon running, that is supporting core gameplay
	

	
	
	
