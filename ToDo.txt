
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
	
	
Roadmap

0.75 - mountain/cave levels + dungeon + enemies
0.76 - desert levels + dungeon + enemies (bottom left castle)
0.77 - castle, city, royal vendors
0.78 - king, fight with king, lightworld storyline done
0.79 - farming + seeds + crops


*map redesign to look like hyrule*
*island overworld map becomes ice-island*
*this leads into darkworld map design too*
0.80 - dark world map + 1st level + transition to/from


0.81 - swamp/water dungeon + enemies
0.82 - ice dungeon + enemies <<< this is larger ice-island map, via darkworld boat
0.83 - graveyard dungeon + enemies

0.84 - darkworld castle + enemies
0.85 - darkworld queen battle
0.86 - darkworld storyline
0.87 - ganon battle + storyline





Today:



Wall Jumps

the basic idea is that we want the player
to be able to detach from the wall (B button
press), starting a fall. Then using the 
joystick or Dpad, changing the direction
of the falling hero overtime. Once the
player realizes this is possible, they will
eventually line up a path that intersects
a ladder or foothold, and try to grab it
via the A button press - completing a heroic
leap from one spot to another.

extended falling routine in actor.update to
allow for setting the hero's interaction rec
while in statelocked falling state. this allows
player to spam A button while falling to 
heroically grab at any nearby ladder or foothold.
-made sure to get the current controller's
direction just prior to checking the grab,
so it doesn't feel laggy or a frame behind.

Done
so, that *completely* implements wall jumps.
playtested, wall jumping is incredibly fun.
this allows for climbing up high to fall
to catch a foothold in an unreachable area,
all based on skill and understanding of the game.

added soundfx and attention particle when hero
successfully completes a wall jump. we could
also add any kind of celebration here to note
the heroic leap, and we could also keep track
of how many successful wall jumps hero has made.

added wallJumps int to playerData,
linked it up to wall jump rountine,
which now increments the wallJump int
each time the hero completes a wall jump.
lets use this data to unlock
a challenge or trophy or something...


Achievements
created achievements enumerator,
with wallJumps as it's only value for now.
created fun_hero.CheckAchievements(),
which accepts an achievement enum,
which then determines which achievement
routine to run. two are implemented
currently - checking for 10 and 100
successful wall jump - from playerData.

successfully completing an achievement
pops a dialog screen telling player
what they have completed. in the future,
this WILL lead to more meaningful
effects, because a dialog screen feels
cheap, honestly. playtested, working
as expected.

updated UWP to match Dx.









additional achievements to add:
cutting bushes achievement.
burning grass / objects achievement.







Climbing++

*pressing A while falling should grab onto nearest foothold.




setup mountain dungeon enemy sprites
setup forest dungeon enemy sprites









Mountain Dungeon

mountain entrance should create mountain dungeon.
this is a separate dungeon, with a diff dungeon recipe
than forest dungeon. no variation from critical path
approach - exit > hub > key > boss.

we need mountain dungeon wall sprites that actually look cave-y.

add mountain enemies, miniboss, boss.
standard enemy is? snake?









Separate Blob and Forest Dungeons

update forest standard enemy to be angry floating eye.
- doesn't need swimming state, has same rec as hero,
so he can cast fireballs, etc...

* the blob dungeon uses the town sheet *

create blob dungeon pit object - this will go on town level.
if hero collides with this obj, he falls into the blob dungeon.
this dungeon builds a critical path to the exit, which
dumps hero back out at last overworld location (or just town level).
-this moves blobs into their own dungeon, without a miniboss or boss.






































Town++
we are going to rebuild the town level completely..
completely! with a few goals in mind: smaller houses
that are father apart. all roofs fade out when link
enters a house, so we don't want multiple houses on
screen at once. only one. we'll also be creating the
My Chickens! sidequest soon, so create a gated area
for chickens.













Mountain Level
should be able to climb up certain rock walls, denoted with small
footholds. hold A to climb. rockwalls normally push link down (faking
gravity), but while in climbing state the push is ignored. this allows
link to literally climb up the mountain. he can't use any items while,
climbing so link has to dodge enemies until he can get to a landing to
take care of them.

the 1st field level is the basecamp and start of the mountain.
the 2nd field level is the major climbing level, and contains the
entrance to the mountain dungeon.
the 3rd field level is the summit, and contains summit related things. ???
the mountain dungeon entrance is NOT on the summit, because
it would be difficult and time consuming to climb all the way back
up when player has died in the dungeon. at the summit we could
have an overlook - which creates a screen with nice concept art and music.
like the player was looking at hyrule from atop a mountain.







Screens + ScreenManager
migrate screens to be GLOBAL. they will still inherit
from base class of screen, but this way we get to keep
the last selected menuItem, etc... 







*not this, but...*
At the begining of the game, build a complete dungeon in the
background. this causes the game to do all the JIT compilation
at the start, so we don't get an initial hiccup when loading into the
first dungeon. *hopefully* because this only happens on uwp
on xbox one, so i'm assuming the code is compiled differently.

title screen is the menu with input over a level screen
played by an AI. this AI doesn't have to be good. it just
has to move around and attack and explore stuff - and it can't
die. after a period of time, randomly load a different level
or dungeon. should start inside a dungeon.






