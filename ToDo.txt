CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

goal: 13 commits/day

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe PP interacts with Actor/Obj in InteractionFunctions.Handle()
	
	
	
	
todo:


13



bug: blob actors get their zOffset set to -16 when they die.
when they respawn in a new dungeon instance, they sort underneath walls.
this looks visually wrong.
cause: we dont reset the zOffset value when the actor's type is set in SetType().
solution: set the zOffset value in SetType(), which can be done per actor type.




bug: either the walls or the blobs aren't getting a setZdepth() call
a blob was sorting underneath the hero and wall
this is likely due to the blob dying in a previous room instance
we'll need to make sure that we're setting the zOffset value for the sprite/actor
this should be done in the GameObjectFunctions.SetType() method



we have a complete game loop now
	win or lose, the summary screen appears
	upon exit, the game resets and is playable again
	
	
we need to be actually tracking summary screen data
	where does this data live? global class? instance per room?
	for now it can be a global class

ideally, we want the dungeon screen hidden by a black rec at full opacity
then fade that overlay rec to 0, exposing the new dungeon

when the win/lose function triggers, the black overlay rec should fade in
this covers the dungeon screen, and provides the background color for the summary screen
the summary screen should not have a background rec at all

	
can we make dungeon screen a global class? 
it would be useful to be able to access it from everywhere
	
work on transition when summary screen does it's final exit
after it exits, the dungeon screen builds a new room

refactor the WinLostFunctions - we're creating a boolean each check()


the dungeon screen should continue updating for a number of frames
this allows the player time to complete the attack/death animation that causes end of game
right now, the summary screen just instantly popsup
we could roll this functionality into the fade in of ovoerlay rec
overlay rec's fade in state could trigger the summary screen, passing it the WinLostFunctions.won boolean value
this would give the player/game enough time to complete the last animation





Version 0.1 Milestones

SOUND AND MUSIC
	when actor dashes, play dash sound
	when actor attacks, play attack sound
	when actor is hit, play hit sound
	when actor dies, play destroyed sound
	won state should have a happy jingle
	lost state should have a sad/evil jingle
	if hero has low health (<2 hearts), play drum track
	play the dungeon background music (fade out and stop when won/lost screen appears)
	fade in bkg music when dungeon is restarted/remade
	
RELEASE v0.1
	record .gif of playing through dungeon room for v0.1
	show summary screen, should be a 'dungeon complete' state



	
	
	
	
	
	
	
	




	
	
Version 0.2 Milestones

	on sword collision, create a hit particle
	create hit particle gameObject
	add to gameObjFunctions.SetType + ProjectileSpawn

	implement a fireball projectile that moves across frames
	rotate the fireball sprite to face down (all projectiles + weapons should face down by default)
	this is spawned from the Y button press
	visually display fire magic medallion for current item in worldUI
	
	when a blob is destroyed, a destroyed effect should happen, and loot should be dropped
	which means we need a destruction particle effect
	which means we need to create loot items
	
	hero should be able to pick up basic loot items (hearts, gold)
	which means hero should have a gold int
	and we'll need to check collisions between hero and projectiles (items)
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	create overworld screen, with selectable dungeon / shop locations
	these lead to DungeonScreen or ShopScreen
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	
	
	
	
	
	
	
	
Version 0.3 Milestones

	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
	
	
Maybes / Ideas	
	
	
	
blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
or they can use a weapon, like a stick or gooey hand, idunno


each actor should have a weapon enum

	
debugInfo displays the floor index, instead of the # of floor tiles used currently
which isn't really a problem, cause we're going to optimize how floors are drawn later on

OPTIMIZATION
if we don't draw the floor tiles, the draw loop is much faster
so, we could standardize the room sizes, then create a floor sprite
then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type
	
consider adding a single frame of a crouch to the dash animation
this would create some anticipation in the dash animation

load in a background sound file (to determine how much space this will take up)
this file should be loaded into the SCREEN's content manager
a screen's content manager should be unloaded when the screen exits
this allows us to load different music for different screens, without touching assets.cs

this sound file should be a set number of bars long, at the standard length
this should be mono, as compressed down as you can
can we use mp3? that would be ideal
does an mp3 get uncompressed when loaded into game? 

re-export sound files aligned to specific bar requirements
this will require some rewriting / restructuring of melodies and chords

sound manager should be handled just like screen manager
part of game, passed as ref to each screen
so a screen can just say "soundManager.whatever()"






