
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	
	
	
	
Roadmap

0.75 - mountain/cave levels + dungeon + enemies
0.76 - desert levels + dungeon + enemies (bottom left castle)
0.77 - castle, city, royal vendors
0.78 - king, fight with king, lightworld storyline done
0.79 - farming + seeds + crops


*map redesign to look like hyrule*
*island overworld map becomes ice-island*
*this leads into darkworld map design too*
0.80 - dark world map + 1st level + transition to/from


0.81 - swamp/water dungeon + enemies
0.82 - ice dungeon + enemies <<< this is larger ice-island map, via darkworld boat
0.83 - graveyard dungeon + enemies

0.84 - darkworld castle + enemies
0.85 - darkworld queen battle
0.86 - darkworld storyline
0.87 - ganon battle + storyline

0.9 - COLOR!!! (keep grayscale as texture option)
0.9+ - supporting media

1.0 - official release






Today:







Wall Sprites

updated dungeon wall sprites for mountain,
forest, town, and colliseum level sheets.
3 different styles are implemented now.

however, we wont get to see the mountain
dungeon wall sprites until we build the
mountain dungeon. same with the town
dungeon wall sprites - we need to build
a blob dungeon to see them.

Enemy Sprites
setup mountain dungeon enemy sprites.
setup forest dungeon enemy sprites.

Boss Floor Decals
boss decals for forest and mountain dungeons
properly represent their bosses, eye and bat.
this pleases me greatly.

organized master & dev psds.

Dialogs++
added mountain dialog to dialog assets.
improved dungeon entrance dialogs to be
hilarious. not really. updated dialog
screen to set Level.ID to mountainDungeon.

DungeonGenerator++
extracted reuseable routines from forest
dungeon generation (monolithic) algorthm.
using these reuseable (atomic) dungeon building
methods, wrote dungeon 'recipes' for forest
and mountain dungeons. a recipe is simply a
series of atomic dungeon building methods 
called in a specific order, with specific
parameters. these parameters (and order)
determine the dungeon's size, spread, number
of connections and secret rooms. the new
dungeon generation system is much more
reuseable, flexible, and varied - and will
serve as a solid foundation to build 6 distinct
dungeons from, with additional bespoke
dungeons for blobs and other side quests.

note: Functions_Level.BuildLevel() starts 
this chain - if level.id is forest or mountain
dungeon, then we call new fun_dungeon.BuildDungeon() 
methods. this completes implementation of
mountain dungeon.

Test
tested forest and mountain dungeons (cheat with map),
discovered and fixed a bug with dungeon generation
where boss room was being built inside of hub room,
and the two rooms were being alternatively set to be
the current room, meaning they were each built each
frame - however the boss room was the last room added,
so it was drawn last and thus was the only one displayed.
sometimes experiencing and figuring out bugs is 
really fun, this bug was one of them.

Polish
changed forest dungeon to have less rooms added
post critical path build - this makes the dungeon
simpler to complete. but, added twice as many secret
rooms, so alternative paths are more frequent and
the player can realize that secret rooms can connect
to secret rooms, since that is an extremely likely
outcome with this recipe.

changed mountain dungeon to have more rooms added
post critical path build than forest - making it
larger and more complex, and thus more difficult.

Test
fixed a bug where mountain dungeon background color
wasn't being set to black. fixed.

Final Thoughts
I probably should of broken this commit into 
smaller commits, but I was very focused and busy. 
Deal with it. This commit essentially changes
how dungeons are generated, added the mountain
dungeon, made the forest and mountain dungeons
distinct, defined how level sheets are used in
game and how they are designed and exported in
photoshop. also, a ton of new sprites were added
to the master file, based on years of collection.











*improve fun_dungeon.buildDungeon_AddBossPath()
we should be able to create a number of rooms
between the last room and boss room. this should
weight itself towards the north direction,
with 25% chance for left or right - but never
south. this means we build boss rooms AWAY from
the exit. we don't want those close to the exit
because it makes the dungeon feel cheap and easy.







*improve mountain dungeon wall sprites
- the transition to the floor is too dark
plus, there is a light part that directly
touches floor and looks wrong.
the top right lighter part also looks wrong,
but the 'shine' on the rock face looks good.
keep and expand it. shiny wet rocks looks good 
and different.



*if a tree is burning, we can't destroy it
*because we only check for trees, and not burning trees too..




Refactoring

functions_level.buildPosition should be level.buildPosition.
same with fun_level.dungeonTrack... lol

level.id.Forest_Dungeon = id.Dungeon_Forest.
id.Forest_Entrance = id.Entrance_Forest.
fix these naming conventions.






Mountain Dungeon

mountain dungeon enemies:
standard: dark spider (from rescueDog)
boss: big bat (dash moves, dives, spawns bat mobs)
miniboss: med bat (dash moves, dives)
mob: sm flying bat (seeks and bite-pushes hero)


forest dungeon enemies:
standard: 
	floating angry eye - flying, sm hitbox
	*need more frames for angry eye (hit, cast)
	shocktopus - flying, sm hitbox
boss: big eye
miniboss: blackeye
mob: seekerExploder

EnemySpawns++
for each dungeon, enemy spawn 1 simply creates
that dungeon's standard enemy at that location.
if there is more than one standard enemy for
that dungeon, then randomly choose one.
*note: most standard enemies are flying, so
they dont have to deal with swim states. so
far, only the blob standard enemy fully
implements all hero states...


add room enemies to object widgets, based on 
what level they 'belong' to.




add:
eye statue - doesn't attack, can be picked up like turtle. 
doesnt move. hand placed.

floating sm eye - randomly floats around, explodes if near hero,
hand placed.









Separate Blob and Forest Dungeons

* the blob dungeon uses the town sheet *

create blob dungeon pit object - this will go on town level.
if hero collides with this obj, he falls into the blob dungeon.
this dungeon builds a critical path to the exit, which
dumps hero back out at last overworld location (or just town level).
-this moves blobs into their own dungeon, without a miniboss or boss.


Town++
we are going to rebuild the town level completely..
completely! with a few goals in mind: smaller houses
that are father apart. all roofs fade out when link
enters a house, so we don't want multiple houses on
screen at once. only one. we'll also be creating the
My Chickens! sidequest soon, so create a gated area
for chickens.





TITLE SCREEN + TEST AI
*not this, but...*
At the begining of the game, build a complete dungeon in the
background. this causes the game to do all the JIT compilation
at the start, so we don't get an initial hiccup when loading into the
first dungeon. *hopefully* because this only happens on uwp
on xbox one, so i'm assuming the code is compiled differently.

title screen is the menu with input over a level screen
played by an AI. this AI doesn't have to be good. it just
has to move around and attack and explore stuff - and it can't
die. after a period of time, randomly load a different level
or dungeon. should start inside a dungeon.





Colliseum +++
extend colliseum with additional challenges.
add more miniboss + boss challenges.
add more standard enemy challenges.
add *colliseum unique* creature challenges.

add *king's tournament challenge*
- this is ladder fight of bosses
- we have tons of bosses to put here, from master/forest/dev




release 0.75... 




