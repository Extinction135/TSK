
CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions



todo:



implement the user clicking on an object or actor
this is done thru the collision rec




how to do better debugging:
	click on a object / actor with cursor
	a message box appears with all current properties of that obj/act listed
	this way we can inspect something easily to reason about it's state
	without taking up a ton of UI / window space
	we should be able to open multiple message boxes too
	and we should be able to pause the game via spacebar
	game should automatically pause if we click to inspect something
	the DEBUG boolean should control if the cursor even gets to check collisions against objs/acts
	
	this wont work for sprites, but it will work for objs/acts/projs/particles
	we'll have to figure out how to create message boxes in dot net core
	
	maybe we could just dump this info to the output panel when we click on an object
	that way we wouldn't have to mess with messageboxes
	
	
implement weapon as a projectile, without any speed
	projectile is pulled from projectile pool
	placed at actor location, offset based on facing direction
	weapon plays through it's animation, with collision recs
	if projectile is active, check collisions against objs/actor/projectiles, move/update projectile
	once projectile reaches end of life, return it to the projectile pool, hide it offscreen
	
	each actor should have a weapon enum
	weapons { none, sword, bow, staff, axe, net }
	
	a projectile has: sprite, move, animate, collision components
	a particle has: sprite, move, animate components
	
	this means we'll have a projectile pool, and a particle pool
	
implement dash smoke as a particle (should spawn whenever an actor dashes)
	
we should be counting the currently used actors, gameobjs, projectiles, floors
this is just an int that gets incremented when Get() is called
decremented when Release() is called
reset when Reset() is called
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
define room.cs, which describes the width and height of a room, and has a .type enum
	create a room instance, then pass that to the room creator routine
	place enemies all around within the room, they should not overlap
	place hero in the center of the room
	
add editor buttons to top of window: draw collisions on/off

dungeon.cs
	a collection of rooms (including an exit, hub, key, + boss room)
	draws the current room
	
room.cs
	rectangle (collisionRec) : size + position
	type
	

	
load in a background sound file (to determine how much space this will take up)
this file should be loaded into the SCREEN's content manager
a screen's content manager should be unloaded when the screen exits
this allows us to load different music for different screens, without touching assets.cs

this sound file should be a set number of bars long, at the standard length
this should be mono, as compressed down as you can
can we use mp3? that would be ideal
does an mp3 get uncompressed when loaded into game? 

re-export sound files aligned to specific bar requirements
this will require some rewriting / restructuring of melodies and chords


sound manager should be handled just like screen manager
part of game, passed as ref to each screen
so a screen can just say "soundManager.whatever()"

