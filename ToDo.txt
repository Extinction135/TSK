
"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


VisualStudio Shortcuts
F12 + selected word = goto definition
CTRL + M, +O = opens, closes regions


The Big 4:
"Give the player meaningful choices to make."
"Remind the player of their choices."
"Recognize and respond to what the player does."
"The Gameworld is a character that reacts to the player."


- Milestones -

Forest Islands complete
Death Mtn Islands complete
Lava Islands complete

Cloud Islands complete
Swamp Islands complete
Thieves Hideout complete

Shadow Dungeon, TSK Fight complete




0.77 playthru: https://youtu.be/_b7qclGTffE
0.78 goals:
	more items (axe, hookshot, hammer, magic mirror)
	more interaction (throwing objs, actors/objs in water, decorations)
	better dungeon traversal (X solved puzzles, marked map)
	better coliseum - uniq objs + enemies
	better overworld - more skulls, waves, cluds, vfx @skullIsland
	X smaller ram - dungeon sheets get smaller
	X fix projectile spawn system + enlarge boss hitboxes
	implement bed + dream sequences - special leveldata + set hero's type + dialog prompt
	(exiting dream field ends the dream)
	(we may split bed into two objects again, to make this interaction more expected)
	X setup roomObjs, projectiles, particles, pickups systems for future growth
	improved pet systems (stable, more pet variety, multiple pets)
	
	





Today:








Particles++

modified functions_particle.setType() to fix a few
texture issues causing some particles to display incorrectly.

Particles++

added sprites for blood / lava, and slime 8x8 particles.
next, we upgrade and test the particle.spawn_explosion()
method to handle all 4 types of debris.

Bosses++

when bosses die, they now spawn a blood explosion, meant to
signify that their death was significant or special.
also, they are living things, so they wouldn't become leafs,
or debris, or slime (maybe some would become slime) - which
are the only other options rn. bigeye and octohead (kraken)
create slime explosions upon death now, cause they are green.

Minibosses++

blackeyes create rock debris upon death. armored spiders create
rock debris when their armor breaks, but they create blood spatter
when they are killed in their non-armored form. octomouth - the
plant in the water that shoots fireballs - miniboss creates slime
particles when he dies, signifying this death as significant but
also different.

Particle System++

updated various parts of code the refernce the changed particle
enum values for leads, debris, blood, and slime. testing revealed
major bugs....











Major Bugs:
swimming state is not being set for hero.
how about for any actors? probably no.
climbing isn't needed, cause the walls dont push hero.
so they need to do that. maybe just hero is excluded from
these branches...





test destroying objects, throwing objects.
test killing living actors: should pop blood.
test killing bosses: should pop blood or slime.





Posts
Post corners should not have hitboxes as tall as they are.
same with vertical post walls - we can just use base hitboxes
instead, this allows link to dash behind them in the expected
manner, and arrows and carefully be shot between posts too.







Polish++

thrown obj's explosions center should be +2,+2
carried obj's offset should be above hero's head more (-y axis)
check carrying objs in water, pls - polish offset








Floor Particles++

we have floor blood in code, but this points to a floor stain.
we are adding floor blood, which is red, next to it.
this means we have two floor objs: stains and blood.
stains are added procedurally to rooms.
blood is created when an enemy is killed/dies (except in pit/water/etc..)




Floor Bones/Skeletons 1 & 2

we have skeleton debris objects that we can place procedurally
in a room upon build(), and we can also randomly create one when
an enemy dies, over the dead enemies blood spatter obj.

these roomObjs flip horizontally upon being placed, after randomly
choosing between the two of them.





Blood Spatter Analysis, Dex

upgrade throwing() enemies to 
leave a blood mark on the ground as a roomObj.
this happens in functions_projectile.kill().
we already have the ground blood sprite

^this should also work for actors. not over pits tho.






















bugs:

destroying a burned post with hammer caused a fire?
destroying non-burned post with hammer caused a fire too.


Destruction++
functions_interaction has handleCommon and blowuP() methods,
which need to be consolidated into one, using a power level byte
which is part of projectile. this isn't part of pro yet tho!
we can also model if a projectile is 'on fire' using a onFire boolean.
then, we can light the proper objects on fire, if we need to.
this seperatees the destruction of objs, from the burning of objs.





Fairy++
do fairies work? no. they are not modeled as pickups.
make fairy a pickup that lasts forever,
modeled like other pickups.





















Fire and Ice Rods

fireballs shoot from firerod.
iceballs shoot from icerod.

generic ice block for all 16x16 enemies, larger enemies
just take damage and get pushed.

ice explosion also creates icetiles underneath it.
icetiles cannot overlap other icetiles, and other
roomobjects, like mountain walls, etc...





POSTS

we need to add posts to the game, so hammers can smack them
down. also, these posts should be indestructible to everything
but hammers, including explosions.

















fire boomerang


comet magic

bombos should make non-hero actors explode via explosions
simultaneously, along with bomb circle around link.

quake shakes the screen and deals level 2 damage to everything
in the level. so it's very powerful. BUT flying objects and actors
are completely immune to it. this also means we need to write a
camera shake routine like we did in th.



we need a blank generic magic medallion to model random enemy
magic, so we dont waste alot of space in the main sheet on these.
easy - and then we can have a specific slot in the UI for enemy
magic under misc.






Special Attacks / Boss "USE"
bigeye uses the shut + bloodshot frames for his special.
bigeye phase 3: 
spawns A TON of exploding seekers while in his special,
while moving to the center of the room and smoking profusely 
and taunting every frame.












Tentacle Magic / Tentacle Walls

the kraken summons tentacle actors upon being hit. this
is not tentacle magic. instead, tentacle magic spawns a
tentacle roomObj, which will attack any actor within it's
attack radius, which is about 16 pixels.

*this means we can create tentacle walls in rooms, also
as part of puzzles - and make it specific to the swamp
dungeon if we want to.
*this means we can also create a tentacle magic medallion,
which allows hero to create one of these roomobjs in the
current room, in the facing direction. this allows for
the creation of walls of angry tentacles. plus, we can
put these tentacles in the water and they won't move
around. 
*tentacles should be destructible with explosions, but
not destructible with level1 type damage.

level 1 is 1 tentacle
level 2 is 5 tentacles
level 3 creates a wall 10 tiles long
level 4 creates a box around link









Dog Vendor Context++

Little Girl (pet vendor)
father's dialog:
'i know she misses her mom, but saving all these puppies'
'isn't going to brink her back.. interested in a dog, mister?'
-we just need to add an older father figure near the pet vendor
to complete this mini-story. we can even make the father a
vendor for a side-quest to find and save the mother. upon
completion, the father could reward player something, switch
to a different type of vendor, and the mom could have sidequests
about revenge on those that kidnapped her. this questline could
lead to the discovery of an entire kidnapping ring, with a hidden
dungeon, with it's own small layout + tons of custom enemies, 
minis, bosses, and stuff. all that from a dog vendor idea.
also, we need more dogs, of different colors.

Dogs++

doggo should spawn with hero whenever he changes rooms in a dungeon.
this makes the dog more consistently around, considering that he can
and often does fall into pits. upon a fall into a pit, we could just
magically teleport the dog to hero's location. that would work too.
-dog should be gameobj in functions_hero class?
-this is handled specially outside of roomObj systems
-doggo is not really roomObj, not really projectile, more like actor
-make doggo an actor instance in fun_hero class that we handle specially
-this means doggo isn't part of actorPool and is never recycled
-we entirely handle doggo in fun_hero class or fun_pet class
-fun_pet class makes more sense, and maybe we have a petPool that we use?
-petPool could model multiple pets! which can easily be implemented
-we would just need to have different pets and diff pet vendors
-then player could build a 'pack' of pets to travel with
-how many pets? lets go with 8 pets.
-also, pressing interact while idle should 'whistle'
-this should call all your pets to your location (enlarge all pets search radius)
*we acn just do a palette swap on doggos for many flavors to test systems


Pets++

doggos should stop, face, and bark at bombable doors in dungeon rooms.
this makes them useful when exploring dungeons.
link and doggos should not collide, so link can always walk thru them.
doggos collide with all other actors, and roomObjs tho. never pros.
so they act as a moving shield against enemies getting close, if player
has 3 or more pets, but they still won't block projectiles or affect
player movement.








Dream Sequences

'i dreamed i was a tentacle, lost at sea...'
hero type = tentacle, empty sea level, with decorations.
dying or exiting level ends the dream. super easy.

'i dreamed i was part of a spider hockey league...'
spider, level is ice tiles, with bumpers, and 'puck'.
this obj inherits hit direction, but doesn't take
damage at all, so it never gets destroyed. spiders
have bite items which will hit the puck.

starting one of these dreams is an interaction with
a bed, popping a dialog asking if they want to sleep
in this bed. A button starts the dream sequence by exiting
the level to a dream setup screen, where text displays
slowly on screen, centered, against complete black.

once the text finishes, we wait for any button input.
then we fade in the level like normal.









Default Dungeon
the default dungeon sheet is the one we use for all
overworld / field level dungeon objects. this means
this 'dungeon' has a green grassy floor.

visual bugs: 
bottom spike lip of pit competes with middle pit black obj.
also, the pit teeth default to brown, which is part of the default
sheet. this default sheet should be thought of as the 'world' 
dungeon sheet - these pits will appear on the overworld against the
expected green bkg color. so the default pit teeth need to be green,
leading into brown as they go down into the ground. 


Coliseum++
we need 'windows' that look into the coliseum,
like the overworld sprite depicts. plus, I don't like
how the coliseum level is unbalanced and to the right.
instead, the coliseum - and all subsequent coliseums -
will be entrance centered to level, north of spawn.
this 'presents' the level much better, because coliseums
have no required puzzle for entry.

a window is a 3x4 obj, with baked in bkg.
so this saves us a lot of roomObjs.


Coliseum++++
we also need to have the large skulls be a 2nd object
that can sit on the ground, indestructible. this way
we can decorate the shadow coliseum appropriately.
we should add this skull detail to the overworld map as
well.





Roofs++
remove rear roofs from the overlap check - now hero
can't peek into houses by walking behind them - he has
to be underneath the main part or the chimney.





Grass++

cut grass should grow into tall grass if near coastlines,
or filled ditches. 





Water++

*we could have animated floating lily pads, much like the animated
flowers that sit over the grass levels. this would add some decoration
to the otherwise bland sea water.

*need to make boat anchor object - this is already in common objs,
and can be used to further decorate piers.





Magic Mirror
use it in a dungeon to return to the exit (starting room). 
exiting dungeon takes us to field.
it can only be used in dungeons, and it's partially broken.
it's use in the shadow dungeon is different, as it transfers
link from the darkworld to the lightworld version, and does
not take link back to the starting (exit) room.

the history of why the magic mirror is broken can be explained.

- plays warp sound fx
should call Level.BuildLevel(Level.ID),
which will cause the level to fade in from black,
and place hero at the entrance the dungeon again.
*this should only work in a dungeon. 






Overworld++
we need more skulls around the shadowking's island and sea. keep
the shadow skull area sparse, cause it's going to be animated,
and it will never 'collapse'




Exploit : Trap Door Pit Teleport

the fix is simply to remove trap doors from the
routine that sets the last 'touched' door / active door.
in fact, only open doors should be set as the last / active door.
the other exploit is to touch a trap door or closed door to
set your respawn point, which is not what i want.


Implement Cane of Somara (or whatever)
this is the cane that creates blocks that are pushable.
this makes it MUCH easier to get thru dungeons, as many
rooms rely on floor switches, which link can simply
create a block over. if a block is created ontop of
a blocking roomObject, the block ...





Room keys - these only work for the room and only unlock 1 door, and
these rooms turn all their doors into locked doors upon close, similar to puzzled rooms
link doesn't put them into inventory - he literally picks them up and walks over
to a locked door and collides with it. link should also be able to throw keys into
locked doors, which means we need to throw objects directly in line from link,
which simplifies how objs are thrown ALOT, and makes their throws more predictable.

this is kinda like super mario world style key gameplay.
if obj.type == key & obj.hitBox.intersects lockedDoor.hitBox,
convert lockedDoor to openDoor, release() key.
- or - we put the key as a menuItem in inventory,
and clear that inventory item when link enters a new room (pre-build).

Keys!!!
**we could have 'keys' in the game, which would be temporary for the room only
the doors would shut and convert to locked versions, or only some of them would.
inside the room is a chest that contains a key. hero picks up the key, unlocks 
a door, key is used, continues on. the room resets, works the same later on.
the key would be displayed in the inventory screen as a brittle rusty key.
and when it's used, the key breaks. the flavor text says that the key will
likely break after one use.

we could lock one door randomly, or we could lock ALL THE DOORS, and then 
force the player to choose which door they want to unlock.









Speed++
slow finish / build becuase we call cleanRoom() twice, which is dumb af
in dungeon / room routines.

