

"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


there are 4 types of commits:
	1. adding a feature
	2. fixing a bug
	3. refactoring / reorganizing
	4. testing & profiling
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	95mb on Win10.  98mb on XboxOne.
	
	
	

	
	

	
	
	
todo:


4



created LoadoutWidget.SetLoadoutItem(), which handles the setting of the item, weapon, armor and equipment in loadout widget.
checks to see if the item.type has changed, scales the item up to 2.0 if true.
added call to LoadoutWidget.SetLoadoutItem() for item, weapon, armor, & equipment pointers from UpdateLoadout().
this makes the scaling of the loadout widget's items the responsibility of loadout widget.
removed code to scale loadout's items from vendor & inventory screens.
playtested, working as expected.












in vendor screen, we should display the item's cost the same way we display the gold amount in loadout
with a white number against a black background, in front of the menuItem
we should make the gold amount display a struct, with a background, text component, and internal counter
we should have a function that updates the gold amount display, probably located in ComponentFunctions.
we could make the gold amount display a component.... hmmm...





we need to show that the player has purchased the item
this may be as simple as updating the menuItems after a purchase







implement the following items:
	item boomerang - just like LttP boomerang
	item bomb - projectile, upon end of life it creates an explosion projectile, bombs--
	
	bottle health - upon user, hero.health = hero.maxHealth
	bottle fairy - if hero dies, hero.health = hero.maxHealth
	
	weapon bow - creates an arrow projectile, arrows--
	weapon staff - creates a magic orb projectile, if health is max, has an attack of 0
	
	armor chest - take reduced damage from enemy attacks
	armor cape - move faster
	armor robe - reduced magic cost
	
	
we'll need to implement a counter for bombs and arrows
this should also appear on the worldUI.






the loadout animates the loadout menuItems
when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
this leads to a double scaling down effect, which should happen
we shouldn't be able to select loadout menuItems.
this solves the scaling issue, and it doesn't make sense to be able to select them
selecting an item should only equip it

Dialog Widget
	we could have a window that sits on top of the trio (in vendor screen) that acts as a dialog for vendor
	could say things like "please buy something, mister.."
	or "you don't have enough gold to buy that.."
	this dialog widget can be reused later in the game for other things as well
	we could put this dialog window below the other widgets
	it would fit better there, do a mockup of this dialog screen
	
what music do we play for the shop dungeon?

Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.

	

	
	
	
Version 0.4 Milestones
	
SHOPS
	for simplicity, there should only be one shop location
	all the 'vendors' will be present in that shop dungeon
	the shop dungeon uses it's own texture sheet, which resembles the interior of a home
	each vendor is a gameobject, that is interacted with just like chests
	speaking with a vendor opens the shop screen
	shop rooms are hardcoded, not designed thru editor
	title music plays while hero is in shop dungeon
	that means that we'll need a dungeon type enum to seperate cursed castle level from shop level
	
Vendor Screen
	player purchases an item with A button
	vendor screen handles the actual gold transaction

Inventory
	we'll need to track what items/weapons/armor/equipment the hero has access to, and what's equipped
	lets use a bit field to do this: weapons {1, 1, 0, 0, 0} = sword, bow, locked, locked, locked
	then from shop screen we can check the bit field and only display weapons that are locked
	this extends to items, magic, weapons, armor, equipment
	
add item/weapon/armor/equipment/magic functionalities
	boomerang
	bomb
	health potion
	arrow + bow
	??? armor, equipment
	
	
	
	
	
conveyor belts should move other game objects, like consumable items
or other objects, like bumpers and spike blocks	
	
	
We should change the 'stats' window/widget to the 'help' widget
display the big 4 topics about how to play the game:
	controls - how to play the game
	objective - the game's objective / goal
	economy - purchasing items with gold
	inventory - equipping and using items
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Version 0.5 Milestones

	ROOM EDITOR + ROOM DATA
	build the room editor screen
	standardize all room types + sizes
	create the room data folder, update cs project to copy room data to output folder
	basically the same approach as CC, but we'll be storing the room data in a slightly diff format
	we'll only store room objects + enemy spawn locations - no floors, projectiles, etc..
	and we'll only need to store the object's enum value
	this will be stored in a 2d list of Column{Rows}.
	so row1 = {0,0,0,0,0,10,10,10,0,0,0,0,0} for example, where 10 is an object type and 0 isn't.
	this was we don't have to store position data, we just correlate rows to room width, and columns to room height
	width and height is set based on room type, so we'll need to save room type.
	but thats it. room type + the 2d array of int values.
	pretty compact and efficient.
	
	COMPLETE DUNGEONS
	we'll be using room editor to build up the room data folders.
	then when we build the dungeon, we'll load all the room data into the game at once.
	when we need a specific type of room, we just copy the necessary room data.
	then we place the room where we need it, and build it.
	this is done over and over again, until the complete dungeon is built.
	we'll use the same routines from CC to build the Exit -> Hub -> KeyPath -> BossPath layout.
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
Polish


	Overworld Screen ++
	later on, we should scale the selected location up.
	but, this requires that the location menuItem be drawn.
	AND it means we'll need sprites for the various locations.
	we can reuse sprites from the main sheet, but we'll need a dungeon sprite.
	we can flatten the background graphic into the map texture.
	that way we have the item/sprite laying over the map texture, simplifying the instances in overworld screen.

	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	it would be fairly easy to add bow and arrow projectiles for hero
	we could also add a spear projectile for blob enemies

	it would also be fairly easy to add the flamethrower obj
	which duplicates the functionality of casting a fireball, just like hero does


	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	pickup and throw
	hero should be able to pickup the skull pot objects
	hero should be able to carry the skull pot objects around
	hero should be able to throw the pots in a direction
	pots should travel for a bit, with a shadow, before colliding with ground
	pots should also collide with room objects
	pot should have sound for pickup, throw, explode/death
	pots should randomly spawn loot too, when they are picked up
	
	dragging/pushing/pulling
	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, and check collisions with all objs & actors
	if a draggable object would collide, it doesn't move
	
	audio ctrls sprite could be animated (sound waves growing)
	video ctrls sprite could be animated too
	fireball should have a cooldown, so hero can't spam them..

	later in development, when we have a game options screen,
	the options widget will need to reset it's neighbors, so it doesn't connect to widgets not visible
	these menuItem neighbors will be set when the inventory screen is created
	
	we'll reuse options window on the title screen, and info window
	inventory screen can be called from overworld screen as well

	we need to implement the empty heart idea in the worldUI
	this means hero should have values for current hearts, and maximum hearts
	maximum hearts can never exceed 14
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.

	add wall pillar decorations when room is built
	doors should have decorations around them as well

	hero should spin around prior to dying
	other actors should not do this, they should die immediately
	the dungeon screen should only start it's fadeIn if the hero is in his final sitting death state
	it should remain 'playing' while hero spins around
	
	we could have the boss drop an EGG projectile, which takes a few frames to 'hatch'
	when the egg hatches, a blob actor could be placed there
	this would prevent the blobs from overlapping each other
	well, actually no - because an actor could overlap the egg as it hatches.. hmmmm
	
	create pause screen, can select different weapons / items
	also displays total gold
	
	expand weapons to include moar { sword, bow, staff, axe, net }
	link pause menu to weapon enum
	
	create shop sreen, can purchase different weapons / items for gold
	implement purchasing routines (gold)
	
	play overworld music for overworld screen
	play shop music for shop screen
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	
	
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, iunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


