

"As we enjoy great advantages from the inventions of others,
we should be glad for an opportunity to serve others by an invention of ours,
and this we should do freely and generously."
- Benjamin Franklin	


there are 4 types of commits:
	1. adding a feature
	2. fixing a bug
	3. refactoring / reorganizing
	4. testing & profiling
	
Gif Capture process:
	run game in release mode
	run LiceCap, expand capture area past program window about 10 pixels on each side
	record at 30fps, open in photoshop and crop the frame down to just the game view (minus window title)
	reduce image size by half, down to original size so pixels are 1:1 ratio
	save as PSD master, then begin cutting out sections/edits
	the default time per frame (set by licecap) is perfect, do not change this
	save for web ->  GIF 32 Dithered, filesize should be under 3mb, loop forever
	test in browser to ensure proper fps

CTRL + M, O = collapse functions/regions
CTRL + M, P = expand functions/regions

adding a new particle/projectile:
	add new gameObject type for PP
	add new gameObject animation list for PP
	add codepath for PP to GameObjectFunctions.SetType.
	add call to spawn PP somewhere
	maybe set the alignment of PP in ProjetileFunctions.AlignProjectile()
	maybe projectile interacts with Actor/Obj in InteractionFunctions.Handle()

adding music:
	music should be compressed down to 22K sample rate, mono.
	files are then saved to .ogg and added to content pipeline, built on high quality.
	
ram useage:
	98mb on Win10.  98mb on XboxOne.
	
	
	

push new release on the 16th


	
	
	
todo:


13



Making Vendor products appear consistently

Vendor products shouldn't disappear after purchase.
this leads to a state where a vendor sells nothing, which doesn't look good or make sense.

updated ForSale widget to always display the bow weapon from the item vendor.
updated VendorScreen to check and see if hero has already purchased the bow item.
created VendorScreen.DialogAlreadyPurchased() method.
added call to DialogAlreadyPurchased() from the routine that checks for the bow weapon.
playtested, working as expected.








we need to do the same thing with the ring




the arrow projectile should revert back to the single pixel sprite
the hitbox alignment is fine






the bow should appear in weapon vendor's products
however, we should check upon purchase to see if we've already bought the item
so we'll need a dialog for that.
we should switch the bottles over to using that dialog as well, since they are a single item





update WorldUI to bounds check arrowsCurrent to arrowsMax.




when hero 'shoots' an arrow, place a bow particle over the hero sprite
it should appear to be in his hands
it should match his direction
this may need to be a projectile

when a pickup item 'dies', an attention particle should be created at it's location












	
	
	
	




need to polish the fairy animation / useage

we need to have a state where the hero is dying 
this plays the hero's dying animation

at start of dying state, all AI input is cleared
during dying state, all AI input is suspended
this prevents the enemies from moving around at this time
we should have booleans that control AI input, and a function that clears and suspends AI input

at the end of the hero dying state, we should check to see if hero has a fairy bottle
if he does, we should play a ressurrection animation, with a fairy particle over the hero
magic sparkles should appear around the hero
there should be a special sound that plays signifying the hero has been brought back to life

at the end of the resurrection state/animation, AI input is continued

need sound for health + magic potion useage - we're just using pickup sound rn


	
	
	
	
	
	
implement the following items:
	item boomerang - just like LttP boomerang
	weapon staff - creates a magic orb projectile, if health is max, has an attack of 0
	
	armor chest - prevents damage from enemy arrows, move slower
	armor cape - move faster
	armor robe - increases max magic value
	
	equipment pearl - wtf does this do in game?
	














	

	
	
	
Version 0.4 Milestones
	
minor bug:
the loadout animates the loadout menuItems
when we select a laodout menuItem from inventory screen, we animate the loadout menuItem again
this leads to a double scaling down effect, which should happen
we shouldn't be able to select loadout menuItems.
this solves the scaling issue, and it doesn't make sense to be able to select them
selecting an item should only equip it


Vendor stalls / layout ++
	we need vendor 'stalls'
	stalls should have rugs under them
	vendors should not be in a line, the should be spread out
	there should be more decorations in the shop
	the 'guide' npc obj should also be in the shop
	there should be a dog actor that chases the hero around
	this dog actor is an enemy, but never attacks and has it's own AI.
	
conveyor belts should move other game objects, like consumable items
or other objects, like bumpers and spike blocks	

what if we pushed the hero a little bit in the opposite direction of the fireball being cast?
this would make it seem like the 'weight' of the fireball pushed him back	
	
instead of an unknown menuItem, we should have a 'purchased' menuItem for items that have been bought	
	
REPLACE BOSS MUSIC	
re-mix the boss music, making drums much less prominent in the mix
also, mix the drums down to mono in session - we're getting phase issues when we convert to mono later
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Version 0.5 Milestones

	ROOM EDITOR + ROOM DATA
	build the room editor screen
	standardize all room types + sizes
	create the room data folder, update cs project to copy room data to output folder
	basically the same approach as CC, but we'll be storing the room data in a slightly diff format
	we'll only store room objects + enemy spawn locations - no floors, projectiles, etc..
	and we'll only need to store the object's enum value
	this will be stored in a 2d list of Column{Rows}.
	so row1 = {0,0,0,0,0,10,10,10,0,0,0,0,0} for example, where 10 is an object type and 0 isn't.
	this was we don't have to store position data, we just correlate rows to room width, and columns to room height
	width and height is set based on room type, so we'll need to save room type.
	but thats it. room type + the 2d array of int values.
	pretty compact and efficient.
	
	COMPLETE DUNGEONS
	we'll be using room editor to build up the room data folders.
	then when we build the dungeon, we'll load all the room data into the game at once.
	when we need a specific type of room, we just copy the necessary room data.
	then we place the room where we need it, and build it.
	this is done over and over again, until the complete dungeon is built.
	we'll use the same routines from CC to build the Exit -> Hub -> KeyPath -> BossPath layout.
	
	adopt CursedCastle's roomData approach (Editor -> XML -> Randomly Choose a Room)
	update dungeon generation routines to build complete dungeons
	create room editor, standardize room sizes
	
	
	
	
	
	
	
	
	
Polish


	Stats MenuItems? Or Help Menu?
	we need menuItem sprites for the various stats
	strength - increases amount of physical damage weapon does
	magic = increases amount of magical damage magic does
	agility = how quickly hero moves + dashes
	luck = increases amount of gold found + rewarded

	pull all the sound effects from links awakening

	we could add a spear projectile for blob enemies

	it would also be fairly easy to add the flamethrower obj
	which duplicates the functionality of casting a fireball, just like hero does


	
	
Stuff that needs to be done, but it's not terribly important rn	
	
	we need a fairy projectile
	this projectile randomly moves around, slowly
	if the fairy collides with hero, it restores his health and magic
	later on, if the hero is attacking with a net, and the net hits the fairy
	we'll put the fairy in a bottle, if the fairy bottle is empty

	pickup and throw
	hero should be able to pickup the skull pot objects
	hero should be able to carry the skull pot objects around
	hero should be able to throw the pots in a direction
	pots should travel for a bit, with a shadow, before colliding with ground
	pots should also collide with room objects
	pot should have sound for pickup, throw, explode/death
	pots should randomly spawn loot too, when they are picked up
	
	dragging/pushing/pulling
	hero should be able to 'grab' objects
	if the object is draggable, then hero should be able to push and pull on it
	this 'grabbing' state should last until player releases the A button
	objects should inherit the movement of hero, and check collisions with all objs & actors
	if a draggable object would collide, it doesn't move
	
	audio ctrls sprite could be animated (sound waves growing)
	video ctrls sprite could be animated too
	fireball should have a cooldown, so hero can't spam them..

	later in development, when we have a game options screen,
	the options widget will need to reset it's neighbors, so it doesn't connect to widgets not visible
	these menuItem neighbors will be set when the inventory screen is created
	
	we'll reuse options window on the title screen, and info window

	we need to implement the empty heart idea in the worldUI
	this means hero should have values for current hearts, and maximum hearts
	maximum hearts can never exceed 14
	
	we should include a soundFXinstance on actors that points to one of the soundFX in assets
	then we can set this instance in ActorFunctions.SetType()
	then later just call it generically, like Actor.AttackSound.Play().
	same with hit sound, death sound, use sound.

	add wall pillar decorations when room is built
	doors should have decorations around them as well
	
	implement additional weapons / items
	weapons : { bow, staff, axe }
	items : { lightning, boomerang, arrow, bomb }
	
	
	
	
Maybes / Ideas	

	blobs should vomit a cloud, which acts as a close range projectile, with a short lifetime
	or they can use a weapon, like a stick or gooey hand, i dunno

	debugInfo displays the floor index, instead of the # of floor tiles used currently
	which isn't really a problem, cause we're going to optimize how floors are drawn later on

	OPTIMIZATION
	if we don't draw the floor tiles, the draw loop is much faster
	so, we could standardize the room sizes, then create a floor sprite
	then instead of drawing 200 floor sprites, we just draw 1 larger floor sprite	


